Архитектура ERP/CRM-систем
--------------------------
В этой публикации я рассмотрю ряд общих вопросов, касающихся архитектуры программных систем автоматизации
бизнеса. Основное внимание я планирую уделить структурам базы данных. Вместе с тем будут затронуты
сопутствующие вопросы построения систем.

I. Архитектура базы данных 

1.1 Общие замечания по объектам базы данных

Понятие объекта базы данных будет центральным в этой публикации. Если попытаться сформулировать определение 
объекта базы данных, то получиться что-то вроде следующего:
Объектом базы данных в системе управления бизнесом называется однотипный набор элементов данных, 
моделирующих представление некоторой объективной сущности, с которой взаимодействует бизнес, а так же совокупность
программных структур и методов, управляющих этим представлением.

В дальнейшем я буду часто сокращать понятие "объект базы данных" до "объекта данных" или DOBJ.

Для примера давайте рассмотрим такую относительно несложную сущность как единицы измерения. Так или иначе
любая система управления бизнесом должна работать с единицами измерения. Важно понимать, что сами по себе единицы
измерения существуют в индустриальной культуре независимо от того разрабатываем мы какую-то систему или нет. То есть,
это - самая настоящая объективная сущность. Нам же понадобится некоторая модель этой сущности для того, чтобы 
с этой моделью можно было работать при представлении иных объектов данных (товары, персоналии, бизнес-транзакции и т.д.).
Например, один товар мы будем мерять в метрах, другой в килограммах, а третий - в штуках. А например, площадь склада
будем мерять в квадратных метрах. Наш объект данных "единица измерения" будет представлен набором записей
базы данных, причем каждая из записей будет иметь одну и ту же структуру, а управляться все эти записи будут одним и тем же 
программным модулем. 

Обращу внимание на то, что "физическое" представление экземпляра объекта данных в базе данных часто не укладывается в единственную
запись и требует всяческих развесистых "хвостов" и расширений в виде списков, дополнительных записей и др.

1.2 Идентификация объектов
Ключевым (причем, в буквально программистском смысле этого слова) свойством объекта данных является возможность 
правильной идентификации экземпляров этого объекта. 

1.3 Референтные объекты
Референтными объектами мы будем называть те представления данных, которые создаются и модифицируются достаточно редко.
Их задачей является отражение внешней и внутренней среды бизнеса. 

В качестве примеров референтных объектов можно привести справочники государств, единиц измерения, товаров, персоналий.

Из характерных особенностей референтных объектов можно назвать:
-- относительно небольшое количество элементов каждого из объектов (от единиц до сотен тысяч записей, изредка - миллионы)
-- значительные требоваяния к методам идентификации 
-- @todo

1.4 Транзакционные объекты
Транзакционные объекты данных, как правило, отражают изменения во внутреннем состоянии бизнеса. Такие объекты отличаются от
референтных значительным количеством операций создания, изменения и удаления.

Типичные примеры транзакционных объектов: бухгалтерские проводки, документы, кассовые чеки.

Транзакционные объекты данных характеризуются следующими особенностями:
-- очень много операций вставок записей
-- высокая взаимозависимость между разными транзакционными объектами 
-- интенсивные привязки транзакционных объектов к референтным
-- следствием двух приведенных выше пунктов является логическая сложность удаления и модификации транзакционных
  объектов в смысле удержания логической непротиворечивости общей базы данных.
-- @todo

1.5 Конкретизация референтных объектов базы данных
Далее я подробно опишу многие, но не все, референтные объекты данных.

1.6 Подшивка вспомогательных и маломощных референтных объектов
Это - один из очень мощных подходов, позволяющий унифицировать многочисленные вспомогательные 
референтные объекты данных.

Идея здесь в следующем: мы создаем одну таблицу со структурой полей, которая может покрыть
требования ко многим объектам данных. В этой таблице будут следующие поля:
	-- int32 ObjType: идентификатор типа объекта
	-- int32 ObjID: идентификтор объекта
	-- string Name: наименование объекта
	-- string Symb: символьный (необязательный) идентификатор объекта
	-- binary ArbitraryData: бинарный буфер фиксированной длины, позволяющий "затолкать" в запись какие-то
		специфические атрибуты объекта. Эти атрибуты будут точно не индексируемыми.
	-- int32 AddendumValue1: 1-й дополнительный индексируемый целочисленный атрибут
	-- int32 AddendumValue2: 2-й дополнительный индексируемый целочисленный атрибут

Кроме этой базовой записи, объектам, хранящимся в таком формате доступные, как и всем остальным объектам данных,
различные варианты расширения: записи Property, теги, текстовые расширения. 

1.7 Персоналии

1.8 Локации

1.9 Товары
===============================

Вопросы автоматизации аптек
-------------------------------

-- Управление серийными номерами
	-- Серийные номера приходят из-вне
	-- Не гарантируется уникальность серийного номера в пределах одного товара
	-- Не гарантируется, что серийные номера для разных товаров будут различны
	-- При продаже фармацевт часто выбирает конкретную партию товара по серийному номеру
	-- Инвентаризация по серийным номерам
-- Многие аптеки требуют от POS-системы строго контроля за остатком продаваемого препарата с целью недопущения пересортицы
-- Строгий контроль за ценами на ЖНВЛС
-- Импорт приходных накладных по различным форматам с автоматической установкой цены производителя для расчета предельно допустимой цены реализации
-- Формирование отчета о ценах на ЖНВЛС для РосЗдравНадзора
	-- Самая трудоемкая проблема - автоматическое ассоциирование собственных номенклатурных наименований с идентификаторами РЗН
-- Подбор товаров по наименованию
-- Автоматизация учета производства лекарств
-- Централизованная система информирования о наличии лекарственных средств и ценах на них в других аптеках
-- Простой и недорогой механизм организации интернет-торговли
-- Информация о необходимости предъявления рецепта врача при продаже препарата

Какой должна быть система автоматизации аптеки

Какие вопросы волнуют собственников и владельцев аптек в контексте автоматизации? Здесь мы попытаемся собрать набор 
требований, исходящих от менеджмента аптек и аптечных сетей, и, естественно, сформулировать ответы на них.

Универсальные черты аптеки как розничного торгового предприятия:
-- Продажи по штрихкодам.
-- Большинство бизнес-процессов аналогичны тем, что присутствуют в иных сегментах розничной торговли.

Далее, что отличает аптечный бизнес от любого другого розничного бизнеса? 
-- Использование серийных номеров, причем, весьма специфическое.
-- Повсеместное применение автоматического импорта приходных накладных от поставщиков
-- Жесткий регламент верхней планки цен на определенный ряд лекарственных препаратов (ЖНВЛС)
-- Нетерпимое отношение к пересортице и отрицательным остаткам
-- Аптеки чаще, нежели розничные магазины иного профиля, применяют прилавочную торговлю. Самообслуживание
  здесь приживается хуже из-за частой необходимости обращения покупателя к квалифицированному специалисту
  за разьяснениями при выборе лекарств и для трактовки рецептов.
-- Аптечный бизнес предпочитает иметь сеть торговых точек.

С этих особенностей мы и начнем:

-- Серийные номера.
Серийные номера лекарственных препаратов поступают в аптеку из-вне. То есть, поставщики присылают в накладной,
кроме вего прочего, и данные о серийных номерах некоторых товаров. Эти серийные номера важны по следующим причинам:
	-- Эти номера идентифицируют централизованную сертификацию и верификацию лекарственных средств
	-- По серийному номеру можно распознать бракованные и фальсифицированные препараты на основе общедоступных
	  справочников таких серий

Необходимость учета серийных номеров лекарств предполагает, что система автоматизации для аптеки должна предоствлять
строгий партионный учет не только при складском хранении, но и при продаже через кассу.
Соответственно, и при инвентаризации подсчет должен осуществляться не только по номенклатурным наименованиям,
но и раздельно по серийным номерам.

-- Импорт накладных от поставщиков.
Одна из специфических особенностей аптечного бизнеса заключается в небольшом количестве крупных поставщиков лекарственных 
средств. В часности, благодаря этому, технологии электронной передачи накладных от поставщиков к аптекам
получили повсеместное распространение в этом сегменте.

Следствием сказанного является требование к система автоматизации импортировать документы из различных источников
данных. Причем, настройка под тот или иной формат данных не должна требовать изменений в исходном коде системы.
То есть, лучше всего, если аптека своими силами, либо, в крайнем случае, с привлечением консультанта, сможет 
настроить импорт накладных из нового или изменившегося источника.

При импорте накладных необходимо импортировать цены производителя лекарственных
средств с автоматическим расчетом законодательно установленного потолка розничных цен.

Еще одна особенность импорта накладных, впрочем, свойственная не только аптекам - возможность
удобного и быстрого разрешения товаров, поступивших с накладной, но которых нет в справочнике данной аптеки.

-- Регламент предельных розничных цен на ЖНВЛС.
Почему расчет предельной розничной цены на ЖНВЛС - сложен? Потому что в эта величина зависит от нескольких
факторов и весьма замысловатым образом. А именно, фактически, речь идет о максимальной наценке на реестровую
цену производителя, которая может меняться для одного товара от прихода к приходу. Плюс к этому,
предельная наценка определяется по специальной ступенчатой шкале.

Я приведу пример формулы расчета системой Papyrus Pharm предельной розничной цены, но не для того, чтобы 
вы вникали в эту формулу, а лишь с целью продемонстрировать ее необычность.

sieve[0.55; 50?0.5; 200?0.4](MinZ(tag.reestrprice, lottag.manufprice))*(MinZ(tag.reestrprice, lottag.manufprice))+cost

Таким образом, мы еще раз убеждаемся в необходимости строгого партионного учета (цена производителя - привязывается к партии,
а не к товару). Естественно, система обязана следить за тем, чтобы цена на партию не назначалась выше предельного значения.

-- Пересортица и отрицательные остатки.
Нетерпимость менеджмента аптек к пересортице и отрицательным остаткам в значительной степени обусловлена 
факторами, перечисленными выше. Коль скоро учет лекарственных средств ведется по серийным номерам и цен на одну 
номенклатурную позицию с разными сериями может значительно отличаться, то недопустимо позволять продавать через
кассу товар, которого нет на учетном остатке.

Соответственно, система для автоматизации аптеки должна предоставлять возможность блокировать продажу товара,
которого нет на учетном остатки. В равной степени как и продажу из партии с превышением учетного наличия этой партии.

-- Аптечные сети
Предприятия, занимающиеся аптечным бизнесом, предпочитают развиваться в сторону увеличения собственных торговых 
точек. Не смотря на то, что это - тенденция для большинства сегментов розничной торговли, аптеки замотивированы
здесь в большей степени из-за того, что торговая площадь одной аптеки, как правило, незначительная и для увеличения рентабельности
приходится увеличивать количество магазинов.

Какие требования к системе автоматизации предъявляют аптечные сети?
-- Прежде всего, это надежный механизм синхронизации данных между офисом и аптеками, если работа организована не
посредством терминального доступа к центру обработке данных из магазинов. 
-- Далее, система должна предоставлять развитые инструменты логистики и ценообразования, и другие, обеспечивающие, с одной стороны,
унификацию информации для всех подразделений сети, с другой стороны, эти инструменты должны предоставлять
гибкость в дифференцировании данных для разных аптек или их групп (если сеть оперирует несколькими десятками торговых точек,
то их правильная группировка - необходимость).
В качестве примера можно привести такую важную функцию, как различающиеся правила формирования цены для разных районов города.
===============================

Персональные события как универсальная концепция в ERP и CRM-системах
-------------------------------

Любые erp и crm системы, а так же относительно не сложные инфраструктурные системы автоматизации бизнеса
так или иначе сталкиваются с проблемами динамического учета явлений, связанных с кадровыми ресурсами, клиентами,
поставщиками и иными субъектами гражданского права, которых я в дальнейшем буду обобщенно называть "персоналии".

Одна из тяжелых задач, связанных с таким учетом, заключается в сопоставлении статических атрибутов персоналий 
с их динамическим изменением. Так, статус сотрудника "женат" является статическим атрибутом, в общем случае, действительным лишь
на какой-то конкретный момент времени. Следовательно, если сотрудник был принят в штат холостым, он получает отрицательной
значение атрибута "женат". Женившись, будучу сотрудником, он получает положительное значение данного атрибута и если, не
дай бог, он через некоторое время разведется, то отдел кадров должен будет снова поменять это многострадальное свойство
объекта. 

Те же соображения справедливы для большинства иных атрибутов перосналий.

Но необходимость менять статический атрибут - не самая большая беда. На много хуже то, что когда нужно получить
его значение на заданный момент времени, отличный от текущего, мы столкнемся с невозможностью этого сделать (не считая обращения
к первичным бумажным документам). Для борьбы с этой проблемой чаще всего применяют привязку значений атрибутов к датам (широко известный пример - 
периодические регистры сведений в 1с).
===============================

Point-Of-Sale: автоматизация промо-акций
-------------------------------

В этой статье хочу поделиться классификацией схем промо-акций, автоматически обрабатываемых POS-системами, выстроенной на 
опыте разработки таковых для множества клиентов в течении многих же лет. Надеюсь, она будет полезна как разработчикам, реализующим
сами POS-модули и интерфейсы с ними, так и пользователям таких систем.

Важные понятия

-- Специальная цена

Под специальной ценой мы будем подразумевать так называемую котировку, которая может быть задана как в абсолютном, 
так и в относительном выражении.

Котировка определяется видом котировки и, собственно, котировкой, то есть абсолютным или относительным значением,
привязанным к товару, либо товарной группе (в этом случае, если для товара, принадлежащего группе, котировка отсутствует,
то используется та, что привязана к группе).

Под относительным значением котировки подразумевается один из следующих вариантов:

1. Наценка, заданная в процентах, к учетной цене поступления.
2. Наценка (отрицательная - скидка), заданная в процентах к учетной (базовой) цене реализации.
3. Наценка (отрицательная - скидка), заданная в процентах к разнице между учетной ценой реализации и учетной ценой поступления (скидка от наценки).
4. Наценка (отрицательная - скидка), заданная в процентах к значению котировки, имеющей специальный зарезервированный вид.

Применительно к рассматриваемому вопросу промо-акций, вид котировки может трактоваться как выделенный ценовой канал
для некоторого множества акций. При этом допустимо ограничивать применимость вида котировки по:
  -- календарному периоду
  -- дням недели
  -- времени суток

В дополнение к сказанному, сама котировка может быть ограничена календарным периодом действия.

-- Комбинация товаров

Для правильного определения многих промо-акций необходимо задать комбинацию товаров, для которой, если она
встречается в чеке продажи, следует применить поощрительное действие. Такая комбинация состоит из списка,
каждый элемент которого представляет из себя товар, сопоставленный с количеством. Вместо товара в элементе списка
может быть указана либо товарная группа, либо, так называемый, обобщенный товар, группирующий произвольное множество
обыкновенных товаров. Кроме того, элемент списка может содержать дополнительные атрибуты (скажем, признак "только идентичные позиции",
означающий, что количество, сопоставленное с обобщенным товарм учитывается только в том случае, если чек 
содержит заданное количество одинаковых товаров из обобщения).

Классификация дисконтных и промо-схем

-- Ручная скидка
Скидка предоставляется непосредственно кассиром на собственное усмотрение, как правило, в процентном выражении.
Такая скидка может быть предоставлена либо на отдельную строку чека, либо на весь чек сразу.

Этот вариант применяется не часто поскольку предоставляет кассиру слишком большие полномочия.
Разумеется, в системе должен существовать регламент прав доступа к такой функции.

-- Специальные цены, предоставляемые без предъявления покупателем дисконтной карты
На ряд товаров могут быть определены специальные цены, привязанные к одному или нескольким условиям, и предостваляемые всем покупателям,
не предъявляющим дисконтную карту. Обычно условиями применения таких цен является дата и время продажи.

-- Простые дисконтные карты
Наиболее простой и популярный механизм дисконтного стимулирования продаж. Обладатель карты получает процентную скидку на любой чек.
Здесь возможны следующие дополнительные возможности:
	-- Величина скидки может варьироваться между картами.
	-- Предприятие может периодически изменять процент скидки по картам в зависимости от оборотов за какой-либо период. В этом случае желательно, 
	  чтобы карты дифференцировались по сериям, дабы можно было раздельно управлять градацией скидки в зависимости от оборотов и раздельно же
	  изменять процент скидки по сериям.
	  Экзотический случай: перенос карт в другую серию, если обороты по ней достигают заданной величины.
	-- Для некоторых товаров может быть установлен лимит предоставляемой скидки, либо просто заблокирована возможность снижения цены по дисконтной карте.

-- Дисконтные карты со скидкой, зависящей от общей суммы чека
Такая схема не фиксирует процент скидки по карте, но динамически определяет его, исходя из суммы чека продажи. Для этого с серией карт должна быть
ассоциирована таблица, связывающая диапазон суммы чека с процентной величиной скидки.
Если карты в системе не дифференцируются по сериям, то такая таблица будет применяться ко всем картам.

-- Дисконтные карты с привязкой специальной цены
Очень гибкий механизм, позволяющий тонко настраивать величины скидок по разным товарам и товарным группам. Особенности специальных цен
я рассмотрел выше.

-- Сложные маркетинговые акции
Здесь я перечислю промо-акции, использующие комбинации товаров, определенные в начале статьи.
	-- В ответ на покупку заданной комбинации товаров покупателю бесплатно выдается подарочная товарная позиция. Например, за покупку 6 бутылок
	  пива покупатель получает фирменную кружку производителя.
	-- В ответ на покупку заданной комбинации товаров покупатель получает на них специальную цену.
	  В качестве примера можно привести акцию, иногда практикуемую под слоганом "Вместе дешевле": скажем, покупка одновременно
	  шампуня и кондиционера для волос одного брэнда приводит к тому, что цена на обе позиции снижается на 15%.
	-- При покупке некоторого набора товаров, самая дешевая позиция из этого набора продается со значительной скидкой.
		Частный случай: самя дешевая позиция отдается бесплатно.
	-- При покупке одного из товаров в количестве, превышающем заданной значение, цена на одну (и только на одну) из штук устанавливается со значительной скидкой.
	-- Дополнительные опции для сложных акций:
		-- Минимальная сумма продажи комбинации товаров, при которой срабатывает акция.
		-- Ограничение количества срабатываний акции на один чек. В большинстве случаев, промо-акция предполагает, что количество выданных подарков
		  равно количеству раз, которые акционная комбинация встретилась в чеке. Однако, иногда, маркетологи предприятия ограничивают
		  количество подарков заданной величиной (например, если подарок дорогой). Фактически, это - полумера: трудно помешать покупателю пройти еще раз
		  через кассу со второй подарочной комбинацией и вновь получить подарок.
		-- Перекрывающаяся комбинация товаров. Такая акция может быть скомбинирована с какой-либо иной.
		  
		  Сложный, с точки зрения разработки, случай применения промо-акции. В общем, для правильного учета
		  предоставленных подарков (скидок) по заданной комбинации товаров, необходимо помечать соответствующие строки чека признаком того, что по
		  ним уже предоставлен подарок. Для перекрывающихся комбинаций требуются специальные меры, позволяющие обойти это правило. 
		  
		-- Информационное сообщение для кассира о сумме, на которую необходимо докупить товаров, чтобы сработала акция.
		  Требование, предъявляемое к некоторым акциям (в основном, лимитированным суммой), для того, чтобы кассир мог бы
		  "спровоцировать" покупателя на дополнительные покупки ради получения поощрительного подарка (цены).
		  
		  Эта опция используется только в магазинах с низкой интенсивностью обслуживания: иначе очередь не 
		  даст возможность потратить дополнительное время на увеличение корзины покупателя.

-- Корпоративный кредит
	Корпоративные кредитные карты применяются сетями массового обслуживания (магазинами, предприятиями сегмента HoReCa,
	салонами красоты и т.д.), клиентура которых в значительной степени постоянна. Собственно, это - не столько инструмент
	стимулирования продаж, сколько способ привязки к себе клиентов и упрощения сбора платежей за товары и услуги.
	
	Технически, к корпоративному кредиту относятся и клубные карты, по которым клиент, однажды заплатив некоторую сумму,
	может получать произвольные услуги из предоставленного предприятием набора таковых и в пределах уплаченной суммы (с опциональным овердрафтом).
	
	Суть корпоративного кредита состоит в том, что клиентам раздаются идентификационные карты, на которые эмитент может
	начислять средства либо по факту внесения клиентом наличных денег, либо в качестве бонуса, либо с расчетом на последующую компенсацию 
	суммы предоставленных товаров и услуг (например, при начислении зарплаты или по доверию).
	  
	Корпоративная кредитная карта может одновременно выполнять все функции дисконтной карты.
	
	Частным случаем корпоративного кредита являются популярные подарочные сертификаты, владельцы которых могут
	купить товаров или услуг на сумму номинала сертификата с возможной доплатой наличными, если покупка превышает
	номинал. Положительный фактор автоматизации учета таких сертификатов состоит в возможности владельца сделать 
	несколько покупок на один сертификат, так как израсходованная в предыдущий раз сумма будет учтена.
	При отсутствии возможности держать хронологию покупок по сертификату, покупателю придется за один раз
	выбирать товары как минимум на сумму номинала.
	
-- Бонусные программы	
	-- При покупке по бонусной карте, сумма покупки передается на централизованный сервер, который периодически
	  начисляет на общую сумму покупок за заданный период определенный процент бонуса, которую покупатель может
	  использовать при следующих покупках.
	  Частные случаи: 
	    -- Сумма учитываемых покупок может ограничиваться заданным набором товаров
		-- Бонус может быть использован только лишь для оплаты заданного набора товаров из чека
		-- Использование бонуса может быть ограничено определенной долей от суммы чека
	-- POS-система может допускать возможность отказа клиента от использования накопленного бонуса.
	  Эта опция вряд ли часто будет затребована, тем не менее, такие требования со стороны предприятий встречаются.
	-- Бонусная карта может иметь одновременно и все описанные выше свойства дисконтной карты.
	
	Функционал бонусных карт аналогичен кредитным картам с дополнительной особенностью: кроме операций прямого списания и
	начисления на карту, для них требуются операции фиксации учетных сумм (чеков, документов) и автоматического начисления по правилу,
	зависящему от величины учетных сумм.
	
-- Важные общие свойства бонусных и кредитных карт
	Принципиально важная общая черта и бонусных и кредитных карт - они является суррогатом денег. Это предъявляет значительные
	требования к надежности хранения данных об этих картах и регламенту прав доступа. Кроме этого, так как чаще всего такие
	карты применяются предприятиями с сетевой структурой, то информация о транзакциях и остатках на картах должна обрабатываться
	централизованно с мгновенным доступом из любой точки продаж. То есть, периодическая синхронизация данных между точками продаж,
	как правило, не устраивает менеджмент предприятия по причине вероятного двойного использования одной и той же суммы с карты.
	
	Мы применяем для централизованной обработки бонусных и кредитных карт сервисы Universe-HTT.
	
-- Особенности фискального учета оплаты покупок кредитными и бонусными картами
	При зачете оплаты по чеку суммы, списываемой с бонусной или кредитной карты, эта сумма не должна учитываться как
	фискальная. То есть, она не должна попадать в фискальную память кассового аппарата.
	В случае с бонусом все более или менее ясно: это - просто скидка. С кредитной же картой требуется небольшое 
	пояснение: сумма, зачтенная за покупку с кредитной карты уже была внесена (при предоплате) или же будет внесена, при последующем
	начислении денег на карту, как фискальная. То есть, проведение оплаты по такой карте в виде фискальной неправомерно увеличит
	налогооблагаемую базу продавца.
	
Приведенная классификация промо-акций составлена в результате обобщения опыта работы с системой Papyrus компании Петроглиф.
Papyrus, имея собственный POS-модуль, в тоже время умеет работать и со многими популярными front-end решениями, как то: Фронтол, Set Retail,
Штрих-miniPos и другими. В связи с этим, следует добавить, что при работе в гетерогенной архитектуре (автономная front-end система + back-end решение)
возникают значительные сложности с реализацией многих из приведенных методов стимулирования продаж. 
Во-первых, из-за того, что вендоры POS-систем предоставляют куда более ограниченный набор инструментов, нежели перечисленный,
во-вторых, по причине сложных интерфейсов для взаимодействия с даже существующими в таких системах механизмов.
===============================

Отрицательные остатки в товарном учете
-------------------------------

Аспекты ограничений на величину учетных остатков с точки зрения систем автоматизации.

Проблема отрицательных остатков в товарном учете часто возникает в сегментах розничной торговли, управления рестораном и производстве.
В других сегментах бизнеса (скажем, оптовой торговле) эта проблема так же дает о себе знать, но, вероятно, в меньшей степени.

Суть проблемы состоит в том, что фактически продаваемая или расходуемая для производства товарная позиция может 
не присутствовать в достаточном количестве на учетном остатке. Далее это явление я буду именовать "учетный дефицит товара"
или просто "дефицит". Полагаю, читатель хорошо знаком с причинами возникновения учетного дефицита, потому не
стану вдаваться в их описание. Целью статьи является рассмотрение способов решения этой проблемы в программных системах
автоматизации.

И так, первым вариантом ответа системы на учетный дефицит является простое разрешение иметь отрицательный остаток товара.
Это - достаточно распространенная практика, имеющая очевидные плюсы:

-- Персонал предприятия, отвечающий за регистрацию операций списания товаров (продажи, списание сырья и т.д.) не должен 
заботиться о правильности ведения учета другими сотрудниками - он просто выполняет свою работу быстро и без остановок.

-- Себестоимость разработки системы при таком подходе заметно ниже, чем с случае иных вариантов.

Недостатки этого варианта менее очевидны, но существенны:

-- При анализе деятельности предприятия невозможно идентифицировать момент возникновения дефицита 
по той или иной товарной позиции. То есть, если вы видите остаток -100шт, то не сможете определить
возник этот дефицит вчера, месяц назад или накапливался в течении года.

-- Продолжением предыдущего пункта является и невозможность с течением времени определить природу 
возникновения дефицита. Никто уже не сможет вспомнить возникал ли дефицит по причине пересортицы,
из-за того ли, что отгрузили сок апельсиновый вместо яблочного, либо забыли ввести приходную накладную,
или же продавцы в торговом зале отдавали покупателям дешевый сыр, наклеивая на него этикетку дорогого.

-- В случае, если проблемы с дефицитом не будут решаться оперативно, то весь товарный учет теряет смысл,
поскольку накапливаемые проблемы сильно искажают результаты анализа. И чем дольше затягивается решение,
тем больший беспорядок возникает. В конце концов руководство, обычно, проводит тотальную инвентаризацию
и начинает учет с чистого листа (который быстро превращается в то же самое, что было до инвентаризации). 

-- Трудность, следующая за первым преимуществом: коль скоро персонал, регистрирующий расходные товарные операции
не ограничен наличием учетных остатков, то он (без жесткого давления менеджмента, которое дорого стоит) 
не будет реагировать на события возникновения дефицита. Соответственно, усугубление проблемы получит лавинообразный характер,
и мы возвращаемся к предыдущему пункту.

Второй подход к проблеме учетного дефицита состоит в тотальном блокировании операций, приводящим к отрицательным 
остаткам.

Все минусы допущения отрицательных остатков отпадают, но во весь рост встает проблема постоянных препятствий 
для ввода документов регистрации расхода товарной номенклатуры. Эта трудность очень быстро разочаровывает
пользователей и руководство предприятия в автоматизации учета, поскольку отсутствие или недопустимая задержка 
регистрации транзакций воспринимается гораздо хуже, чем беспорядок, возникающий из-за отрицательных остатков.

Третий подход - самый сложный. Он заключается в блокировании операций, приводящих к дефициту, скомбинированном 
с механизмами борьбы с дефицитом и компенсации дефицита.

Перечислю меры борьбы с учетным дефицитом и технику его компенсации.

-- Простой вывод информации о том, что учетного остатка таких-то товаров не хватает для выполнения операции.

Наиболее незамысловатый метод, просто информирующий сотрудников о проблеме и оставляющий на их усмотрение 
варианты ее ручного устранения для выполнении требуемой операции. Это, конечно, не является, в полном смысле, 
мерой борьбы с учетным дефицитом, но инструментом контроля - безусловно. Куда лучше, чем простое сообщение "Операция не завершена".

-- Хранение структурированной истории учетного дефицита, связанной с той или иной функцией списания с остатков.

Шаг в сторону совершенствования. Идея в том, что некоторая операция, при которой возможно возникновение дефицита, 
сохраняет информацию о дефицитных товарах и то, сколько их не хватает для анализа и выправления.

Такая техника отлично работает при списании кассовых сессий в розничной торговле. Поскольку кассовая сессия сохраняется в базе данных,
то ассоциирование с ней набора товаров, которые не удалось списать с учетного остатка из-за дефицита,
представляется легко реализуемым. Оператор может сразу увидеть проблемы, решить их а потом повторить операцию, дабы система досписала 
те продажи, остатки по которым восстановились в результате принятых решений.

Хорошим подспорьем в устранении трудностей при этом является возможность подстановки: оператор выясняет, что
проведенный через кассу товар числится на остатке под другим номенклатурным наименование и подставляет
это наименование вместо дефицитного. Система вместо оригинального товара списывает подставленный. Само собой разумеется,
что менеджмент должен иметь возможность анализа таких подстановок.

-- Форсированное формирование остатков недостающих товаров, путем автоматического создания документа прихода.

Идея метода достаточно проста - система, обнаружив учетный дефицит, создает документ прихода,
в котором присутствуют все дефицитные товары в необходимом для проведения операции количестве. После этого
остается в ручную или автоматически повторить основную операцию.

Это - грубый метод устранения проблем дефицита, аналогичный по примитивизму подходу с допущением отрицательных остатков, 
но чуть лучше, ибо дает возможность отследить и проанализировать документы, формирующие искусственные остатки.
В конечном итоге, все равно придется выбирать способ избавиться от оприходованных остатков или как-то нивелировать 
их существование (по крайней мере в суммовом выражении, иначе после очередной инвентаризации сотрудники устроят бунт).

-- Функции компенсации дефицита за счет остатков на других складах либо посредством комплектации 
  (изготовления недостающих товаров) при условии, что система "знает" как их скомплектовать.

Наиболее тонкий и сложный метод разрешения проблемы учетного дефицита. Следует оговориться, что он применим только к,
так называемым, процессам обратного учета. То есть, когда вспомогательные операции (передача между учетными зонами хранения,
изготовление продукции под непосредственный заказ и т.д.) нормированы и не вводятся в ручную. Схемы обратного 
списания часто применяются в ресторанном бизнесе и в розничной торговле при учете собственного производства (салаты,
выпечка и т.д.).
В противоположность обратному процессу, при прямом процессе учета все вспомогательные операции учитываются just-in-time и 
никакого "нормального" дефицита быть не может (по крайней мере, не должно).

И так, компенсация дефицита состоит в том, что система, идентифицируя дефицит по номенклатурным наименованиям,
которые можно "забрать" с другого склада, либо изготовить, автоматически выполняет соответствующие операции по заданным
в конфигурации правилам. Здесь есть несколько технических сложностей, типовых, впрочем, для большинства разработчиков
систем автоматизации:
	-- Списание производства может быть каскадным: какие-то ингредиенты производимой конечной продукции 
	  сами являются объектами производства.
	-- Возможно комбинированное списание в виде формирования документов производства на одном складе и передачи
	  его на склад окончательного списания (цех - торговый зал).
	-- Компоненты изготавливаемой продукции сами могут оказаться в учетном дефиците, в этом случае
	  мы возвращаемся к началу обсуждения, но с дополнительными сложностями.
	  
К слову, техника обратного списания при строгом ограничении неотрицательности остатков, избавляет от
необходимости в искусственном разделении номенклатуры на товар/комплект, поскольку, если товар отсутствует на
складе и система имеет правило его производства, то создаст его из имеющихся комплектующих. При наличии же
остатка, будет списывать то, что есть.
	  
-- Добавим нюансов

Правильное ограничение на неотрицательность остатков должно включать не только текущее значение, но и
распространяться на любую дату. То есть, при создании или изменении документа задним числом, система обязана
проверить и пересчитать остатки, чтобы ни в один момент времени остатки товаров, включенных в этот документ, 
не становился отрицательным.
Игнорирование этого правила либо лишает смысла ограничение, либо заставляет блокировать создание и изменение документов
задним числом (что и проблему полностью не решает и вызывает массу нареканий пользователей). 

Дополнительное ограничение на величину остатка возникает при партионном учете. Состоит оно в запрете превышения остатка
по лоту величины, которая была изначально оприходована. Смысл такого ограничения менее очевиден, чем для отрицательных
остатков. В качестве примера можно привести отчет о (не)оплаченных остатках товаров поставщика. Если указанное правило 
будет нарушено, то отчет будет искаженным.
Чаще всего необходимость контроля верхнего предела остатка по лоту возникает при проведение возвратных операций.

-- В качестве послесловия 

Описанные аспекты ограничений на величины товарных остатков сформулированы исходя из опыта разработки и 
эксплуатации системы управления предприятием Papyrus, в которой реализован жесткий контроль партионных остатков
в купе с рассмотренными механизмами.

Соболев Антон 
9 января 2013
==========================

Stylo-Q beauty cases
--------------------------

Современное управление beauty-бизнесом - высокотехнологичный процесс. Он требует
качественного взаимодействия с клиентами, поставщиками и четкой координации 
между персоналом.

Система Stylo-Q предоставляет инструменты для эффективной реализации бизнес-процессов
предприятий beauty-индустрии.

(Бизнес-кейс)
-- Как ваш клиент получит приложение?
	Самый простой вариант: вы предложите ему скачать его из Google Play
	Так как Stylo-Q может быть применяться в разных сегментах бизнеса, то у вашего
	действительного или потенциального клиента оно уже может быть установлено, в этом
	случае клиент найдет ваш салон и обратиться к вам за услугой.
-- Как ваш клиент запишется на обслуживание?
	В приложении Stylo-Q, выберет ваш салон, откроет страницу записи на обслуживание,
	выберет услугу, время и, возможно, мастера. Все.
-- Как ваш сотрудник узнает, что у него новый заказ?
	Он получит уведомление на своем смартфоне и сможет его подтвердить, отклонить, либо
	предложить клиенту другое время.
	
	Разумеется, сотрудник видит на своем устройстве полное расписание и может оперативно 
	планировать свой рабочий день.
	
//
//
//
Сетецентрическая модель управления франчайзинговой сетью

-- Единая система - видение ситуации у франчайзи
-- Обмен отчетными данными 
-- Унифицированный подход к обслуживанюи клиентов
-- Умножение привлекательности франшизы за счет того, что клиенты франчайзи применяют одно и то же приложения
	для записи и взаимодействия с салонами и клиниками.
-- Синхронизация взаимодействия с поставщиками, дающая снижение расходов для франчайзи и дополнительный
	доход франчайзеру.
-- Индустриальная эстетика общего мощного инструмена, мотивирующая всю сеть к развитию
//
//
//
Управление агентскими продажами

-- Гибридный механизм обмена данными с мобильным агентом: данные запрашиваются агентом с любой частотой, но
	работа с этими данными осуществляется агентом автономно. Большинство решений предлагают либо полный офф-лайн:
	офис передает данные аегнту с фиксированной частотой, а агент их забирает и дальше работает автономно.
	Либо (редко) полный он-лайн, но за оперативность данных придется заплатить невозможностью работы при потери связи.
-- Иерархическая струтура товарных категорий (не видел в других решениях)
-- Работа с брендами
-- Получение агентом статуса исполнения заказа (я это не доделал во всех деталях, но принципиально - работает)
-- Адреса доставки
-- Агенту доступны долги по клиентам
-- Сроки годности (не думаю, что в данном случае актуально, но тем не менее)
-- Возможность редактировать заказ даже после отправки на сервер (вообще то, killer-feature, но не знаю
	насколько это понятно тем, кто никогда агентом не работал).
-- Мощное управление ценообразованием через котировки (не все пока доделал)
-- (Еще нет, но будет) Управление задачами
-- Фиксация геолокации агента в момент создания заказа
-- Мы открыты дл дальнейших доработок и улучшений.

-- Самое главное (и это не легко будет донести) та же сетецентричность: продавец оборудования начинает работать со Stylo-Q,
	предлагает это же решение своим клиентам, их коллеги в том же городе тоже становятся потенциальными пользователями Stylo-Q
	и, как следствие, потенциальными покупателями оборудования от твоего визави (Михаила). Цепочка неочевидная и не простая,
	но ее потнциал - убойный. То есть, попробуй как-то донести до него мысль, что став клиентом Stylo-Q, он увеличивает 
	не только управляемость собственного бизнеса, но и "физически" расширяет поток своих клиентов. Это похоже на 
	сетевой маркетинг, но куда лучше: ты не должен закупать на свои деньги партии товара, который возможно не продашь.
	Ты покупаешь нечто для себя и через некоторое время все равно в выигрыше без дополнительных инвестиций.
//
//
//
План ролика по агентским заказам
Ролик должен быть коротким, потому некоторые пункты можно опустить, если продолжительность будет зашкаливать.
Я не знаю каковы каноны (и есть ли онии вообще) продолжительности таких роликов (может, не более 2 минут?)

-- Панель функций сервиса - выбор функции оформления заказа
-- Обзор закладок для подбора данных (группы, бренды, товары, клиенты, поиск). Закладки текущего заказа 
и списка созданных заказов оставить "на потом"
-- Подробная демонстрация подбора товара по групп (иерархия групп, выбор группы, демонстрация списка товаров,
  отфильтрованных по группе, кнока сброса фильтра)
-- Подробная демонстрация подбора по бренду (план аналогичен подбору по группе)
-- Подробный разбор списка товаров с деталями элементов списка.
-- Демонстрация фактического выбора товара по группе с переходом на закладку текущего документа
-- Аналогичная демонстрация выбора второго товара по бренду
-- Выбор клиента с адресом доставки
-- Подробная демонстрация закладки текущего документа (отдельные элементы, дата исполнения, примечание и т.д.) с финалом на передаче заказа сервису
-- Демонстрация закладки списка созданных документов (наверное, тут же стоит продемонстрировать изменение заказа, например,
  увеличив количество одной из позиций, либо выбрав еще одну товарную позицию).
-- (если останется время) Показать дополнительный функционал: поиск, подбор по штрихкоду.  

Если, в соответствии с этим планом, ролик получится не очень длинный, то можно максимально быстро набрать
новый заказ, дабы убедить потенциала, что процедура очень простая (это важно - не знаю почему, но многие
менеджеры считают агентов какими-то недочеловеками, которым нельзя доверить ничего сложнее деревянной ложки).

Последний абзац строго для внутреннего пользования :)  
//
//
//
План презентации для франчайзиноговой сети

1 слайд. Преамбула. Тотальное решение для охвата всей бизнес-цепочки от приема клиентских заказов в салонах
до поставки и обслуживания оборудования.

Решение Pq - горизонтально интегрированная технология, применяемая в качестве магистральной основы для
диверсифицированного бизнеса. Функционал решения позволяет обеспечить охват учета и управления для 
различных бизнес-сегментов. Технологии, используемые в Pq, реализуют взаимоувязанное
управление как внутри одного холдинга, так и между независимыми предприятиями в рамках совместных
процессов.

2 слайд. Поставка и обслуживание оборудования

Управление полным жизненным циклом сложного оборудования:
-- прием заказа
-- размещение связанных заказов у поставщиков
-- получение и последующая поставка оборудования заказчику
-- отслеживание задолженностей и расчетов с поставщиками и клиентами
-- трассировка серийных номеров оборудования и комплектующих
-- управление сервисным обслуживанием и рекламациями

3 слайд. Координация закупок у поставщиков

В рамках франчайзиноговой сети решение позволяет организовать координированные
схемы закупок оборудования и метериалов у поставщиков, что приводит к снижению 
издержек и улучшению взаимоотношений между франчайзером, франчайзи и поставщиками.

4 слайд. Управление взаимоотношениями с конечными потребителями

Решения Pq, кроме прочего, дают мощные инструменты для удовлетворения запросов
членов франчайзинговой сети в вопросах их взаимоотношений с собственной клиентурой.
-- Прием и обработка записей на обслуживание от клиентов
-- Организация торговли сопутствующими товарами
-- Отслеживание процедурных историй
-- Базовые техники бизнес-управления: финансы, координация работы персонала, инвентаризация и прочие 
  функции жизнеобеспечения предприятий

5 слайд. Синхронизация данных между франчайзи и франчайзером, обеспечивающая 
сетецентрическое координирование и управление.

Техническая модель, лежащая в основе комплекса Pq, способна обеспечить "бесшовную" 
синхронизацию данных между филиалами одного предприятия, равно как и между франчайзером и
франчайзи. На деле это означает, что вся группа компаний будет использовать общие справочные 
данные и информацию о транзакциях для эффективного координирования работы как между собой, так
и при взаимодействии со сторонними акторами (поставщиками, клиентами, агентами).

6 слайд. Интеграция с оборудованием и со сторонними решениями 

Решение предоставляет механизмы интеграции с широким спектром оборудования и сторонними системами.
Как то, государственные системы "честный знак", "меркурий", ЕГАИС, сервис UDS, социальная сеть VK.
Система открыта для заказной разработки произвольных интеграционных проектов с поставщиками и 
производителями.

7 слайд. Заключение. Унифицированное информационное обеспечение как значимый центр прибыли.
	
Кратко высветив в этой презентации ряд характерных особенностей решения Pq, в заключении мы бы хотели подчернуть,
что это - в равной степени и технологический инструмент и важный компонент бизнес-модели, поскольку,
кроме прочего, позволяет сформировать дополнительные центры извлечения прибыли для предприятия.
А именно:
-- Унифицированное информационное обеспечение повышает ценность франшизы, отражаясь одновременно
и виде цены и в форме goodwill-актива
-- Скоординированные закупки у постащиков позволяют получать дополнительные скидки и ретро-бонусы
-- Возможность информационной интеграции в логистические цепочки поставщиков дает еще один
рычаг роста лояльности вендоров
-- Общее решение для выстраивания взаимоотношений с клиентами салонов увеличивает их клиентскую базу
и благосклонность клиентов, что влечет рост привлекательности франшизы.
//
// План разработки системы управления компьютерным клубом
//
1. Модель программы управления клиентским компьютером
	-- Лицевая панель авторизации
	-- Панель авторизованного доступа к программам и инструментам системы
2.  Управляемые ограничения возможностей клиента на компьютере
	-- Ограничения запуска программ
	-- Ограничения использования диска
	-- Ограничения использования сети (блокируемые либо разрешенные интернет-домены)
3.  Управление пользовательскими профилями
	-- Создание нового профиля при авторизации на клиентском копьютере
	-- Удаление профиля и результатов работы после завершения сеанса работы клиента
	-- Сохранение профиля и результатов работы для восстановления (в том числе на другом компьютере) при
		новом сеансе того же клиента.	
4. Модель взаимодействия панели управления клиентским компьютером и сервером Papyrus
	-- Получение извещений от управляемого компьютера
	-- Передача команд управляемому компьютеру
	-- Обработка клиентских запросов от управляемого компьютера
	-- Авторизация клиента
	-- Завершение сеанса
		-- greatfull
		-- автоматическое по завершению лимита времени/денег
		-- аварийное
5. 	Технологические сессии для управления клиентскими компьютерами
6.  Инфраструктурные компоненты
		
phase I
-------
-- Модель клиентского интерфейса
-- Минимальное взаимодействие с сервером (на уровне, необходимом для отработки дизайна и базового функционала)
Время: ~4 недели

done.
Детализированная спецификация:
- Модель клиентского интерфейса
	-- Форма авторизации [имя, либо телефон, либо код аккаунта] - [пароль]
	-- Форма выбора сессии с информацией об аккаунте
	-- Запуск сессии, завершение сессии
- Минимальное взаимодействие с сервером 
	-- Самоидентификация компьютера на сервере
	-- Запрос информации о доступных вариантах сессий с ценами
	-- Авторизация либо по имени, либо по номеру телефона, либо по номеру аккаунта (пока без 2-й фазы подтверждения по смс)
	-- Получение информации об аккаунте (имя, остаток на счете и т.д.)
	-- Запуск сессии
	-- Завершение сессии (только штатное, без вариантов аварийной остановки)

Дата начала: 4 мая 2023
Фактическая дата завершения: 29 июня 2023

phase II
--------
-- Ограничения на клиентском компьютере
-- Управление профилями
-- Управление клиентскими сеансами (старт, сценарии завершения сессий, сценарии возобновления сессий)
!-- На выходе из этой фазы необходимо сформировать формальный список критериев готовности 
к использованию с целью определить точку перехода к continuous-режиму разработки.
Время: ~4 недели

Уточненная спецификация phase II:
Пункты, помеченные знаком вопроса, обязательны для реализации в принципе. Однако, я не уверен, что успею их реализовать
в рамках 2-й фазы.
-- Ограничение доступа на клиентском компьютере к приложениям 
-- Восстановление состояния диска после завершения клиентского сеанса
-- Определение полной спецификации пользовательского интерфейса клиентского сеанса одновременно с реализацией (возможно, с точностью
	до небольших нюансов, которые будут уточняться на последующих фазах).
-- Формирование списка критериев готовности системы с целью определения спецификаций на следующие фазы проекта.
?-- Автоматическое создание процессоров при включении в сеть нового компьютера
?-- Дискаверинг сервера
?-- Автоматическое восстановление соединения после потери связи с сервером
Время: ~5 недель

Дата начала: 4 июля 2023

phase III
-- Точная отработка взаимодействия между клиентскими компьютерами и сервером
-- Администрирование
-- Платежи, скидки, акции, бонусы
Время: ~6 недель

phase IV
-- Моделирование мобильного приложения
-- Инфраструктурные компоненты
Время: ~5 недель

phase V
-- Тестовая эксплуатация с целью устранения тяжелых дефектов и формирования списка требований
для continuous-режима.
Время: ~3 недели

continuous mode
В этом режиме система должна войти в состояние эксплуатационной готовности
и разработка переходит в режим формирования недостающего функционала и шлифовки существующего.

//
//
//
Кратко промежуточные результаты:
Взаимодействие клиентская машина -> сервер в общем и целом работает. Пока не весь функционал есть,
но инфраструктура готова.

Последние дни работаю над интерфейсом. Работа больше общая (hi-quality интерфейс достаточно
сложен не только в дизайнерском, но и в техническом аспекте). Скриншоты опубликую, когда будет что-то более-менее 
удобоваримое.

Уточню задачу на 1-фазу (срок которой я, увы, уже сорвал)

Изначально она выглядела так:
{
    — Модель клиентского интерфейса
    — Минимальное взаимодействие с сервером (на уровне, необходимом для отработки дизайна и базового функционала)
}

Теперь я ее немного детализирую:
{
    - Модель клиентского интерфейса
      -- Форма авторизации [имя, либо телефон, либо код аккаунта] - [пароль]
      -- Форма выбора сессии с информацией об аккаунте
      -- Запуск сессии, завершение сессии
    - Минимальное взаимодействие с сервером 
      -- Самоидентификация компьютера на сервере
      -- Запрос информации о доступных вариантах сессий с ценами
      -- Авторизация либо по имени, либо по номеру телефона, либо по номеру аккаунта (пока без 2-й фазы подтврерждения)
      -- Получение информации об аккаунте (имя, остаток на счете и т.д.)
      -- Запуск сессии
      -- Завершение сессии (только штатное, без вариантов аварийной остановки)
}
===========================

Техника фунпацу (奮発)
---------------------------

Техника фунпацу применяется для оперативного управление рабочим временем
в условиях, когда необходимо выполнять значительное число задач в рамках
реализации одного или нескольких больших проектов.

Далее я приведу ряд соображений, которые, надеюсь, объяснят почему нужна какая-то
специальная организационная техника в ситуации, с которой человечество сталкивается
тысячелетиями и так или иначе решает возникающие проблемы.

Здесь понадобится сопоставить два вещи. 

С одной стороны мы имеем долгосрочный проект, цель которого более менее понятна, ясно что должно получится в результате его реализации.

С другой стороны имеется один или несколько (а может и множество) человек, психика которых может оперировать
лишь тактическими задачами - сейчас сделать то-то, завтра то-то и т.д. Я хочу сказать, что все или почти все люди
способны решительно действовать только на коротких дистанциях, когда четко понятно что и как делать.

То есть, мы имеем значительный люфт между целями долгосрочного проекта и способностью человеческой
натуры применить собственную волю к выполнению ряда коротких задач с целью достижения стратегического результата.

Обычно такое противоречие решается иерархической организационной структурой, в которой каждый уровень иерархии
имеет собственный уровень ответственности и цель, сформулированная на вершине пирамиды, достигается путем 
дробления проекта на меньшие по объему, но более конкретные задачи, и директивного форсирования нижних уровней 
для выполнения этих задач.

Я не собираюсь критиковать иерархические подходы к решению больших задач - иногда работают и ладно. Проблема
из-за которой появилась техника фунпацу заключается в том, что часто нет избыточных времени и ресурсов для построения 
сложной иерархической пирамиды ради реализации какого-либо проекта. В таком  случае человек или коллектив, реализующий
проект, попадает в ситуацию люфта, описанного выше. То есть непонятно за какую задачу хвататься для осуществления общего
замысла, ибо задач много и, что еще хуже, они могут внепланово возникать по мере выполнения других задач.

К слову сказать, я убежден, что хорошо известная проблема прокрастинации связана как раз с этим: человек, собираясь
сделать какую-то работу, обнаруживает, что на ее выполнение потребуется неизвестное количество времени и в ходе
работы возникнет неизвестное же число непредвиденных проблем. В результате его психика "перескакивает" на что-то 
более понятное и однородное - просмотр фильма, компьютерная игра и т.д. Другими словами, беда не в том, на что
отвлекается психика, а в том, от чего она пытается увильнуть.

Как устранить или хотя бы смягчить указанное противоречие? Самый простой вариант: включить волю внутреннюю или 
внешнюю (надсмотрщик с кнутом - однако этот вариант мы рассматривать не станем, поскольку он не входит в область 
определения наших рассуждений). Мы начали рабочий день с четким планом что мы должны сделать и делаем это. 
Придется заставлять самого себя.
В любом случае результат можно будет получить только на короткой дистанции. Далее снизится производительность,
размоются цели из-за возникновения непредвиденных задач или неожиданных трудностей в запланированных.
Психика начнет увиливать от работы в сторону прокрастинации.

Техника фунпацу предлагает назамысловатый способ обойти проблему за счет квантования рабочего времени.
Общая идея состоит в следующем: работа "на износ" длится фиксированный отрезок времени (который и называется фунпацу).
Длительность этого отрезка вы можете выбрать самостоятельно. Я предпочитаю ровно час (60 минут), но думаю, что в зависимости
от характера деятельности и индивидуальных особенностей эта длительность может быть и другой (45 минут, 90 минут, в общем что-то
в этом роде).

Рабочий день в этой модели состоит из серии фунпацу, разделенных небольшими периодами релаксации. 
Первое что мы делаем - определяем чем сейчас займемся, заносим в блокнотик краткое содержание задачи,
время начала и начали работать. Не отвлекаемся и не отдыхаем. Когда время фунпацу закончилось - останавливаемся
и релаксируем.
Что я подразумеваю под релаксацией? В общем случае идея такая: 
	-- подбиваем результат законченной фунпацу: заносим в блокнотик время окончания и краткий результат
	-- несколько минут (1-5) - просто сидим с закрытыми глазами
	-- если есть необходимость на что-то отвлечься - так и делаем
	-- решаем чем займемся на следующей фунпацу - цикл возобновляется.

Какие трудности нас подстерегают при исполнении описанной модели? Я попытаюсь их перечислить и дать пояснения (насколько
смогу):
	-- фунпацу закончилась, а поставленная задача - нет, но есть соблазн не останавливаясь продолжить работу.
	  Откровенно говоря, это - самая простая проблема. Насильно останавливаемся, фиксируем результат, после
	  очень короткой релаксационной паузы запускаем новую фунпацу и продолжаем работу.
	-- в ходе работы обнаружилась непредвиденная трудность, которая сильно меняет запланированный процесс.
	  В этом случае, оставшуюся часть фунпацу перенаправляем на переосмысление задачи и планирование способов 
	  обхода возникшей трудности. Важное замечание: переосмысление задачи рассматривается именно как работа.
	  То есть, мы не пытаемся увильнуть в сторону от проблемы, а тратим время на проектирование. Причем желательно
	  отражать осмысление трудностей в письменном виде хотя бы для самого себя.
	-- запланированная задача быстро сделана и осталось еще время до завершения фунпацу.
	  Прежде всего, при планировании фунпацу, если оценка времени на работу ниже кванта времени, то запланируйте
	  сразу несколько работ, чтобы они в сумме не были меньше времени фунпацу. Если же случилось так, что
	  больше ничего не осталось, то без сожаления завершайте фунпацу и переходите к следующей итерации. Ничего 
	  страшного не произойдет. 
	-- неожиданные внешние помехи в течении времени фунпацу.
	  Здесь придется импровизировать. Если сможете, перенесите реакцию на помеху на время релаксации
	  между фунпацу. Если такой возможности нет, то оборвите фунпацу. Либо, если реакция на помеху 
	  короткая, просто продолжайте потом работать дальше как ни в чем не бывало.
	-- слишком длинные релаксационные паузы. 
	  Весь этот текст строится исходя из предположения, что читающий обладает достаточной самомотивацией
	  и самодисциплиной. То есть слишком длинная релаксация - проблема, а не уловка. Потому, полагаю,
	  что постепенно вы сможете самостоятельно сжимать такие периоды дабы получить более высокий результат
	  собственной работы.
	  
По ходу эксплуатации модели фунпацу всплыла функционально-психологическая трудность. В двух словах суть ее 
такова: есть проблема, которую необходимо решить в очень сжатые сроки (как можно быстрее). При попытке 
решить эту проблему за несколько подходов (фунпацу) цель не достигается. В результате задача становится 
блокирующей - она и сама не движется и мешает реализации параллельный задач, поскольку необходимость
ее завершения давит на психику. Сейчас я нахожусь в состоянии разрешения этой трудности. Если у меня будет
какой-то результат, сообщу как я с этим справился (или не справился).

Сообщаю: никак не справился. То есть, конечно, справился, но без хитрых рецептов - просто переломил проблему через колено.
===========================

Анализ клиентской активности
----------------------------

outlet {
	[RFM]

	Recency — давность (как давно ваши клиенты были у вас на процедурах). 
		Высокий показатель давности означает, что у клиента уже сложилось достаточно хорошее впечатление о вашем бренде, 
		поэтому он недавно посещал вас. Давность в срезе клиентской базы можно посмотреть, если отсортировать клиентов по дате последней покупки.
	Frequency — частота (как часто они у вас покупают). Высокий показатель частоты говорит о том, что клиенту нравится ваш бренд, 
		ваши товары и услуги, поэтому он часто к вам возвращается. Для расчета частоты посещения нужно общее кол-во покупок/визитов 
		разделить на кол-во месяцев/дней/годов и т.д.
}

Если вы работаете с большим числом клиентов, то вам наверняка знаком вопрос "Кто из клиентов давно не приходил?".
Он настолько же типичен насколько типична и попытка ответить на него по-простому: а давайте найдем всех клиентов, которые
ничего не покупали последние столько-то дней. В общем, не такой уж и плохой вариант, но если клиентов много, а вы предлагаете
некое разнообразие услуг и (или) товаров, то упомянутый подход будет весьма грубым. Почему? Потому что паттерны поведения разных
клиентов отличаются. Соответственно, регулярность их взаимодействия с вами так же будет разной. Допустим, если
вы продаете расходные материалы, то потребность различных покупателей в вашей продукции разнится в зависимости
от интенсивности их деятельности. Да и при сопоставимой интенсивности стратегия закупки может отличаться, что сказывается на
периодичности закупки. Те же соображения относятся и к услугам и к иным товарным категориям.

Стало быть, нам необходим какой-то инструмент, позволяющий оценить регулярность обращения конкретного клиента в прошлом и на основании
этого знания спрогнозировать период, в течении которого он должен бы вернуться. И, если, он таки не вернулся, начать беспокоиться.

Попробуем развить указанный подход. Для этого понадобится решить несколько вопросов:
1. определить события, которые следует трактовать как факт клиентской активности
2. собрать статистику таких событий по каждому клиенту за какой-то ретроспективный период времени
3. определить фактор, который позволит унифицировать категоризацию текущего состояния задержки активности
  каждого конкретного клиента. 
4. классифицировать всех клиентов в соответствии с фактором, определенном в предыдущем пункте.
  Собственно, этот шаг является финальным в смысле сформулированной проблемы.
  То есть, как только мы классифицировали всех наших клиентов, мы знаем какие клиенты находятся в
  состоянии нормальной активности, кто задержался (и, наверное, надо бы его подтолкнуть к действию), 
  кто безнадежно затянул взаимодейстие с нами (вероятно, про них уже можно забыть). 
  
Теперь чуть больше деталей по пунктам, перечисленным выше.

События, трактуемые как клиентская активность. Мы вынуждены их четко специфицировать, поскольку в ERP/CRM-системах
с каждым клиентом может быть связано значительное число транзакций, многие из которых избыточны в контексте
нашей задачи. Скажем, одна продажа может включать в себя цикл [заказ-отгрузка-оплата]. Для одной услуги салона красоты 
сгодится формула [запись-подтверждение-услуга-кассовый чек]. То есть, то, что трактуется фактом клиентской активности
должно быть определено в терминах системы управления бизнесом, которую вы используете. Так в приведенных выше примерах, 
фактами активности могут быть транзакции отгрузки и оказания услуги. Но не обязательно: кто-то может решить, что
таковымм являются заказ или запись на услугу, либо, событие оплаты товара или услуги. Здесь важно то, чтобы 
вы не учитывали и оплату и отгрузку одновременно, поскольку в таком случае получится, что единственный факт активности
будет учтен дважды.

Как только мы определились с интерпретацией факта клиентской активности, можем приступать к фазе сбора 
статистики. Математика здесь самая незамысловатая. Зададим некоторый ретроспективный период времени (квартал, год,
3 года, в зависимости от того как давно вы учитываете бизнес-транзакции и насколько важны для вас старые данные).
За заданный период для каждого клиента соберем все транзакции, трактуемые как его активность. Далее, посчитаем
статистические характиристики ряда разрывов между событиями в днях. Нам пока не понадобится ничего сложнее,
чем средняя величина разрыва (E) и стандартное отклонение (S). 

Теперь мы в плотную подошли к фактору оценки задержки клиентской активности. 
Мы будем измерять задержку активности конкретного клиента в количестве n стандартных отклонений (S), отличающих
текущую задержку в днях (D) от средней величины задержки (E). 

n = (D - E) / S

Так как E и S являются свойствами конкретного клиента, то мы можем унифицировать клиентов через фактор
n. То есть, мы определяем, что если задержка клиента превышает, скажем, 5, то это значит что надо начать беспокоиться.
Прелесть в том, что этот фактор будет одинаково приемлем и для клиента, который заходит раз в неделю, и для того,
который наведывается ежемесячено.

Давайте я еще раз проговорю то, чего мы добились. Если бы мы получили отчет о клиентах, кто не приходил в последние 30 дней
с целью идентификации тех, кому надо позвонить и напомнить о том, что мы не закрылись, то в этот отчет попадут те,
кто не приходил уже больше года и те, кто приходит раз в 32 дня и собирался завтра вас навестить. Ну и те, кто, приходит
раз в неделю, но перестал ходить. И менеджеру придется детально разбираться со строками отчета, дабы не тратить время и силы
на тех, на кого их тратить еще не пришло время и на тех, кому звонить уже бесполезно. 

Имея наш замечательный (и несложный) фактор, унифицирующий паттерны поведения различных клиентов, мы запросим
у нашей ERP/CRM-системы отчет о клиентской активности и получим, в частности, список клиентов, которые не давали 
о себе знать в течении числа дней, характерных конкретно для каждого из них. Кроме того, мы увидем всех клиентов,
которые взаимодействуют с нами активно и регулярно (почему бы их не поощрить?), а так же тех, кто уже безнадежен 
(слишком долго не давали о себе знать, причем, это "слишком долго" характерно только для этих клиентов, ибо для иных
может означать, что они скоро ожидаются).

Уточним еще один важный момент. Для того, чтобы вся наша конструкция заработала, понадобится определить где-то в конфигурации 
4 граничных параметра. Два параметра задают задержки в унифицированных единицах n, и служат маркерами для отличия 
тревожной задержки от регулярной и безнадежной задержки от тревожной. Два других параметра комплиментарны первой паре
и применяются в аварийной ситуации, когда по клиенту нет приемлемой статистики. Эти аварийный параметры определяют
те же самые границы, но в старых добрых днях. 
Опишем все 4 параметра чуть более формально:
-- Значение Nd, при превышении которого считается, что клиент задержался с визитом
-- Значение Nh, превышение которого означает, что клиент безнадежно давно нас не навещал
-- Аварийное значение Dd - задержка в днях, превышение которой трактуется как задержка визита. 
  Применяется при отсутствии статистики по клиенту.
-- Аварийное значение Dh - задержка в днях, превышение которой трактуется как безнадежная задержка визита. 
  Применяется при отсутствии статистики по клиенту.  

Ну и дополнительный бонус к описанным результатам - наш анализ позволяет одновременно за счет тех же инструментов
получить поименный список новых клиентов (если мы зададим период, за который следует анализировать появление новых
клиентов).


Метафизика
---------------------------

В этой статье я обрисую собственное представление о метерии, пространстве, времени и других базовах концепциях мира.
Рассуждения носят качественный характер и не содержат формул, вычислений и прочее. Я знаю, что мои соображения
и выводы сомнительны и не имеют четких и твердых доказательств. Тем не менее, я это пишу.

Прежде всего следует разобраться с пространством. Существующая научная канонизация предполагает, что пространство и 
время однородны. То есть, весь мир, можно сказать, "плавает" в однородном трехмерном пространстве и все процессы
происходят в течении однородного времени.

У меня несколько иная точка зрения на этот вопрос. И для ее объяснения я предлагаю два мысленных эксперимента.
Идея этих эксперимнтов в том, чтобы осмыслить крайние ситуации и, отталкиваясь от них, начать разбираться с 
мирозданием.

И так, эксперимент первый: представим абстрактную точку, не имеющую ни размера, ни массы, ни электрического заряда, ни 
каких-либо иных физических параметров. Эту точку мы поместим где-то в абсолютной пустоте. То есть там, где отсутствуют
хоть какие-то физические поля, предметы и так далее. То есть наша несчастная точка не испытывает даже теоретически 
влияния каких бы то ни было окружающих объектов. В этих обстоятельствах возникает вопрос: что есть пространство и время
для этой точки. Расстояния ей мерять не до чего, время ей отмерять не от чего. Другими словами, для нее отсутствуют
и пространство и время. Не то что они однородны и бесконечны. Нет. Их просто нет. Совсем. 

Второй эксперимент похож на первый, но применяется к другой крайности. Представим такую же бесплотную точку, как и
в первом "опыте", но предположим, что она движется со скоростью света. Вот точно-точно со скоростью света (не с бесконечно близкой к,
а той самой предельной). Что мы можем сказать о том, каким видится мир этой точке? У нас есть специальная теория относительности,
которая безапелляционно сообщит: ни пространства, ни времени для этой точки нет - лоренцево сокращение "убивает" их до состояния
абсурда.

Если приведенные мысленные эксперименты принять за основу (что, соглашусь, не бесспорно), то можно сделать некоторые важные выводы.
А именно:
1. Пространство и время - спутники материи. Если мы убираем материальные объекты, то пространство исчезает. Та пустота которая 
остается не имеет никаких характеристик. Там не поместится ни чего и нет ничего такого, что туда не поместилось бы. 
Там нет времени. Ни мгновений, ни вечности, никаких иных временных отрезков поскольку ничего не происходит.
2. Я не знаю каким образом, но есть основания полагать, что абсолютный покой и скорость света представляют одно и тоже 
базовое метафизическое состояние, что бы под этим не подразумевалось.
3. Это - перефразированный 1-й вывод но в более важной коннотации: материя и есть пространство. То есть, мы не можем
обсуждать пространство как нечто, содержащее все сущее. То, что мы называем материей и есть пространство. Большая часть
всей статьи будет вращаться вокруг этой идеи.
//
//
//
Класс SFile

Библиотека SLIB содержит класс SFile являющийся примером глубоко проработанного универсального объекта для управления
файлами. Перечислю несколько ярких особенностей этого класса:
-- применение в качестве простой обертки для c-структуры FILE
-- низкоуровневая работа с файлами
-- манипулирование большими файлами
-- подстановочное манипулирование буфером в памяти вместо реального файла
-- null-output: специальный режим игнорирования любых функций вывода
-- чтение сжатых gz- и bz2-файлов почти как обычных бинарных файлов
-- чтение и запись отдельных файлов в архивах
-- аккуратное по-строчное чтение, адаптированное к различным форматам завершения строки
-- специализированный механизм чтения csv-строк
-- функция чтения всего содержимого файла в память
-- расчет различных хэшей по содержимому файла
-- работа с nonascii-именами файлов и каталогов
-- сервисные функции
	-- CreateDir
	-- CreateDirByTemplate
	-- IsDir
	-- GetCurrentDir
	-- Remove
	-- RemoveDir
	-- Rename
	-- WildcardMatch - проверка имени файла на соответствие шаблону (wildcard)
	-- Sort - сортировка огромных файлов
	-- GetStat и GetStatExt - получение подробной информации о файле

Приведу простой пример чтения строк из фaйла

	void Sample_ReadCsvFile(const char * pFileName)
	{
		SFile f_in(pFileName, SFile::mRead);
		if(f_in.IsValid()) {
			SString line_buf;
			// опции функции SFile::ReadLine (SFile::rlfChomp|SFile::rlfStrip) означают, соответственно,
			// удалять завершающие символы перевода строки и удалять лидирующие и хвостовые пробелы.
			for(uint line_count = 0; f_in.ReadLine(temp_buf, SFile::rlfChomp|SFile::rlfStrip); line_count++) {
				// ... // Что-то делаем со считанной строкой
			}
		}
	}



