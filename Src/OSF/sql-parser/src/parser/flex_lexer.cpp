#line 1 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.cpp"

#line 3 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

// A lexical scanner generated by flex

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
	#define FLEX_BETA
#endif

#ifdef yy_create_buffer
	#define hsql__create_buffer_ALREADY_DEFINED
#else
	#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
	#define hsql__delete_buffer_ALREADY_DEFINED
#else
	#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
	#define hsql__scan_buffer_ALREADY_DEFINED
#else
	#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

// flex integer type definitions
#ifndef FLEXINT_H
#define FLEXINT_H

#include <slib.h>
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#endif /* ! FLEXINT_H */

// begin standard C++ headers

// TODO: this is always defined, so inline it
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
	#define yynoreturn __attribute__((__noreturn__))
#else
	#define yynoreturn
#endif

#define YY_NULL 0 // Returned upon end-of-file

// Promotes a possibly negative, possibly signed char to an integer in range [0..255] for use as an array index.
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

// An opaque pointer
#ifndef YY_TYPEDEF_YY_SCANNER_T
	#define YY_TYPEDEF_YY_SCANNER_T
	typedef void * yyscan_t;
#endif

// For convenience, these vars (plus the bison vars far below) are macros in the reentrant scanner
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

// Enter a start condition.  This macro really ought to take a parameter,
// but we do it the disgusting crufty way forced on us by the ()-less definition of BEGIN.
#define BEGIN yyg->yy_start = 1 + 2 *
// Translate the current start state into a value that can be later handed
// to BEGIN to return to the state.  The YYSTATE alias is for lex compatibility.
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
// Action number for EOF rule of a given start state
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
// Special action meaning "start processing a new file"
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
	#ifdef __ia64__
		// On IA-64, the buffer size is 16k, not 8k.
		// Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
		// Ditto for the __ia64__ case accordingly.
		#define YY_BUF_SIZE 32768
	#else
		#define YY_BUF_SIZE 16384
	#endif
#endif

// The state buf must be large enough to hold one state per character in the main buffer.
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
	#define YY_TYPEDEF_YY_BUFFER_STATE
	typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif
#ifndef YY_TYPEDEF_YY_SIZE_T
	#define YY_TYPEDEF_YY_SIZE_T
	typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
 do { \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
 } while(0)
#define unput(c) yyunput(c, yyg->yytext_ptr , yyscanner)

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state {
	FILE * yy_input_file;

	char * yy_ch_buf;  /* input buffer */
	char * yy_buf_pos; /* current position in input buffer */
	int yy_buf_size; /* Size of input buffer in bytes, not including room for EOB characters. */
	int yy_n_chars; /* Number of characters read into yy_ch_buf, not including EOB characters. */
	// Whether we "own" the buffer - i.e., we know we created it,
	// and can SAlloc::R() it to grow it, and should SAlloc::F() it to delete it.
	int yy_is_our_buffer;
	// Whether this is an "interactive" input source; if so, and
	// if we're using stdio for input, then we want to use getc()
	// instead of fread(), to make sure we stop fetching input after each newline.
	int yy_is_interactive;
	// Whether we're considered to be at the beginning of a line.
	// If so, '^' rules will be active on the next match, otherwise not.
	int yy_at_bol;
	int yy_bs_lineno; /**< The line count. */
	int yy_bs_column; /**< The column count. */
	int yy_fill_buffer; /* Whether to try to fill the input buffer when we reach the end of it. */
	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER (yyg->yy_buffer_stack ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart(FILE * input_file , yyscan_t yyscanner);
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer , yyscan_t yyscanner);
YY_BUFFER_STATE yy_create_buffer(FILE *file, int size , yyscan_t yyscanner);
void yy_delete_buffer(YY_BUFFER_STATE b , yyscan_t yyscanner);
void yy_flush_buffer(YY_BUFFER_STATE b , yyscan_t yyscanner);
void yypush_buffer_state(YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state(yyscan_t yyscanner );

static void yyensure_buffer_stack(yyscan_t yyscanner);
static void yy_load_buffer_state(yyscan_t yyscanner);
static void yy_init_buffer(YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner);
#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer(char * base, yy_size_t size , yyscan_t yyscanner);
YY_BUFFER_STATE yy_scan_string(const char * yy_str , yyscan_t yyscanner);
YY_BUFFER_STATE yy_scan_bytes(const char * bytes, int len , yyscan_t yyscanner);

void * yyalloc(yy_size_t , yyscan_t yyscanner);
void * yyrealloc(void *, yy_size_t , yyscan_t yyscanner);
void   yyfree(void * , yyscan_t yyscanner);

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if(!YY_CURRENT_BUFFER) { \
        yyensure_buffer_stack(yyscanner); \
		YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if(!YY_CURRENT_BUFFER) {\
        yyensure_buffer_stack(yyscanner); \
		YY_CURRENT_BUFFER_LVALUE = yy_create_buffer(yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 174
#define YY_END_OF_BUFFER 175
// This struct is not used in this scanner, but its presence is necessary.
struct yy_trans_info {
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
};
static const flex_int16_t yy_accept[1236] = {
	0,
        0,    0,    0,    0,  171,  171,    2,    2,    0,    0,
      175,  173,    9,    9,  173,  173,  161,  169,  161,  161,
      161,  165,  161,  161,  161,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  173,
      161,  174,  171,  172,    2,    2,    3,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    6,    8,    7,    9,  156,    0,    1,

        0,  163,    4,  162,  165,  158,  157,  155,  159,  168,
      168,  168,  168,  168,  168,   17,  168,  168,   22,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,   66,  168,  168,   69,   76,  168,  168,  168,  168,
      168,  168,  168,  168,  168,   93,  168,   97,  100,  101,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  131,  168,  168,
      168,  168,  168,  168,  168,  168,  168,    0,  160,  171,
      170,    2,    2,    2,    2,    1,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    6,    5,  166,    0,  162,   10,
      168,   12,  168,  168,   15,  168,   18,  168,  168,  168,

      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,   34,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,   55,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,   79,  168,  168,  168,
      168,  168,  168,  168,  168,  168,   94,  168,  168,   98,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  122,  168,  168,  168,
      168,  168,  168,  168,  132,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  167,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    0,  168,  168,  168,  168,  168,  168,  168,
      168,   23,  168,   25,   26,  168,  168,  168,  168,   31,
      168,  168,  168,   35,  168,  168,  168,  168,   40,  168,
      168,   44,   45,  168,  168,  168,  168,  168,  168,  168,
       53,  168,   56,   57,  168,  168,   61,  168,   63,   64,
      168,  168,  168,  168,  168,  168,   75,  168,   78,   80,
       81,  168,   83,  168,  168,  168,  168,  168,  168,  168,
       96,  168,  168,  168,  104,  168,  168,  107,  168,  168,
      168,  168,  168,  168,  168,  168,  116,  168,  168,  168,

      168,  124,  125,  168,  168,  168,  130,  168,  134,  168,
      168,  168,  168,  168,  168,  168,  168,  144,  168,  146,
      168,  148,  149,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,   11,   13,  168,   16,  168,
      168,   20,  168,  168,  168,  168,  168,  168,  168,   33,
      168,  168,  168,  168,   39,  168,  168,  168,  168,  168,
      168,  168,  168,  168,   52,  168,  168,   59,  168,   65,
       67,  168,   70,   71,  168,  168,  168,   82,   84,  168,
       86,   87,  168,   90,  168,  168,  168,  102,  103,  168,
      168,  168,  168,  168,  111,  168,  168,  114,  168,  168,

      168,  168,  123,  168,  168,  128,  168,  168,  168,  137,
      168,  168,  168,  142,  168,  168,  147,    0,  150,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    0,  168,  168,   19,  168,  168,
      168,   27,   29,  168,   32,  168,  168,  168,   38,  168,
       42,  168,   46,   47,  168,   49,  168,  168,  168,   58,
       60,   62,   68,   72,  168,  168,   77,   85,   88,   91,
      168,   95,   99,  168,  168,  168,  168,  168,  112,  168,
      168,  117,  119,  121,  126,  168,  129,  168,  168,  168,
      138,  140,  141,  143,  168,    0,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,   14,
      168,   21,   24,  168,   28,   30,  168,  168,   37,  168,
      168,   48,   50,   51,  168,  168,  168,   89,   92,  168,
      168,  168,  109,  110,  168,  168,  118,  120,  127,  168,
      168,  168,  145,    0,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        0,  168,  168,    0,  168,   41,   43,  168,  168,   74,
      168,  168,  168,  113,  115,  168,  135,  168,    0,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,  168,
      168,    0,  168,   54,   73,  168,  106,  108,  168,  136,
        0,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,  168,    0,    0,   36,  105,
      168,    0,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  168,    0,    0,  151,  133,  154,    2,    2,    2,
        2,    2,    2,    2,    0,  168,    0,    0,    2,    2,

        2,    2,    0,  168,  153,    0,    2,    2,    2,    2,
        0,  139,    0,    2,    2,    2,    0,    0,    2,    2,
        0,    0,    2,    2,    0,  152,    2,    2,    0,    2,
        0,    2,  164,    2,    0
    } ;

static const YY_CHAR yy_ec[256] = {
	0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    8,    6,    6,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,    6,    6,   22,
       23,   24,    6,    1,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
        6,    1,    6,    6,   51,   52,   53,   54,   55,   56,

       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
       77,   78,    6,   79,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[80] = {
	0,
        1,    1,    2,    1,    3,    1,    4,    5,    1,    1,
        1,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    1,    1,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    7,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    1
    } ;

static const flex_int16_t yy_base[1248] = {
	0,
        0,    0,    0,    0,  853,  824,   79,    0,  156,  157,
      821, 4816,  159,  164,  788,    0, 4816, 4816,  154,  164,
      799,  176,  145,  768,  751,  170,  170,  178,  176,  168,
      217,  188,  224,  230,  135,  178,  232,  243,  230,  275,
      273,    0,  283,  324,  329,  289,  281,  286,  196,    0,
      690, 4816,    0,  754,    0,  168,  170,  735,  751,    0,
        0,  265,  388,  400,  198,  726,  722,  421,  500,  555,
      501,  404,  608,  483,  421,  657,  464,  309,  506,  552,
      557,  706,  602,  440,  631,  757,  810,  633,  680,  710,
      487,  675,  641,    0, 4816,  705,  277, 4816,  707, 4816,

      693,  876, 4816,  886,  898, 4816, 4816, 4816, 4816,    0,
      236,  258,  326,  409,  265,  284,  280,  688,    0,  412,
      340,  552,  489,  325,  320,  752,  495,  344,  396,  429,
      775,  422,  435,  478,  494,  534,  536,  554,  603,  557,
      562,    0,  578,  586,  810,  602,  630,  634,  659,  703,
      748,  654,  659,  664,  659,  706,  690,  732,    0,  737,
      741,  765,  756,  774,  800,  762,  802,  778,  808,  786,
      814,  884,  818,  814,  895,  895,  893,  884,  900,  900,
      899,  895,  893,  901,  902,  888,  909,  615, 4816,    0,
     4816,    0,  370,    0,  653,    0,  638,  962,  972,  984,

        0,    0,    0,    0,  966,  978,  980,  981,  983,  984,
      993, 1002, 1033, 1018, 1037, 1040, 1089, 1039, 1058, 1027,
     1142, 1091, 1074, 1093, 1103, 1193, 1120, 1147, 1174, 1178,
     1172, 1214, 1217, 1229, 1203, 1228, 1116, 1250, 1247, 1300,
     1259, 1260, 1233, 1283, 1285, 1306, 1297, 1335, 1340, 1336,
     1347, 1346, 1358, 1341, 1371, 1382, 1376, 1392, 1407, 1409,
     1408, 1434, 1444, 1432, 1463, 1470, 1469, 1484, 1486, 1519,
     1503, 1453, 1509, 1525, 1555, 1536, 1522, 1558, 1561, 1540,
     1576, 1598,  596,    0,    0, 4816, 4816,  631, 1644,    0,
      906,    0,  909,  903,    0,  915,    0,  902,  903,  911,

      969,  985, 1597, 1029, 1036, 1046, 1075, 1110, 1149, 1138,
     1144, 1147, 1176, 1214, 1577, 1237, 1266, 1258, 1279, 1322,
     1328, 1329, 1375, 1400, 1414, 1410, 1433, 1459, 1495,    0,
     1502, 1537, 1574, 1563, 1579, 1581, 1596, 1601, 1609, 1606,
     1617, 1621, 1637, 1638, 1625, 1638,    0, 1635, 1651, 1648,
     1654, 1658, 1653, 1640, 1642, 1642,    0, 1663, 1653, 1647,
     1662, 1663, 1654, 1678, 1659, 1696, 1662, 1669, 1676, 1658,
     1674, 1690, 1689, 1704, 1696, 1708,    0, 1696, 1692, 1700,
     1697, 1698, 1707, 1706,    0, 1707, 1717, 1708, 1717, 1709,
     1724, 1714, 1708, 1710, 1715, 1740, 1730, 1737, 4816,    0,

      629, 1779, 1759, 1760, 1772, 1773, 1775, 1774, 1789, 1776,
     1805, 1806, 1827, 1812, 1828, 1851, 1852, 1841, 1842, 1867,
     1791, 1868, 1883, 1901, 1884, 1902, 1923, 1913, 1920, 1907,
     1924, 1934, 1938, 1957, 1959, 1976, 1964, 1963, 1975, 1980,
     1969, 2013, 1990, 2001, 2019, 2030, 2015, 2042, 2032, 2051,
     2056, 2068, 2065, 2072, 2081, 2086, 2095, 2091, 2108, 2098,
     2110, 2112, 2127, 2122, 2148, 2161, 2151, 2137, 2174, 2164,
     2173, 2200, 2203, 2178, 2188, 2214, 2229, 2204, 2239, 2238,
     2261, 2260, 2270, 2273, 2275, 2292, 2279, 2305, 2294, 2296,
     2317, 2311, 2335, 2332, 2336, 2341, 2362, 2350, 2368, 2372,

     2387, 2391, 2394, 2406, 2408, 2421, 2433, 2440, 2450, 2444,
     2473,    0,  627, 1773, 1777, 1825, 1826,  585, 1895, 1956,
     2025,    0, 2181,    0,    0, 2187, 2179, 2215, 2227,    0,
     2228, 2255, 2300,    0, 2319, 2322, 2352, 2389, 2405, 2426,
     2434,    0,    0, 2432, 2437, 2441, 2447, 2471, 2478, 2477,
        0, 2470,    0,    0, 2486, 2473,    0, 2480,    0, 2480,
     2496, 2484, 2480, 2487, 2490, 2491,    0, 2499,    0,    0,
        0, 2492,    0, 2502, 2511, 2513, 2501, 2515, 2506, 2516,
        0, 2523, 2513, 2516,    0, 2522, 2529,    0, 2536, 2542,
     2544, 2542, 2537, 2536, 2535, 2555,    0, 2545, 2546, 2558,

     2559,    0,    0, 2560, 2558, 2563,    0, 2551,    0, 2569,
     2553, 2562, 2556, 2578, 2560, 2574, 2579,    0, 2566,    0,
     2585,  372, 2572,  590, 2592, 2596, 2598, 2601, 2608, 2619,
     2622, 2615, 2625, 2638, 2641, 2648, 2655, 2657, 2674, 2671,
     2652, 2695, 2697, 2681, 2688, 2707, 2704, 2698, 2734, 2731,
     2749, 2733, 2740, 2750, 2756, 2763, 2773, 2785, 2790, 2796,
     2787, 2799, 2812, 2803, 2806, 2829, 2841, 2836, 2839, 2842,
     2858, 2843, 2855, 2846, 2879, 2882, 2885, 2881, 2897, 2888,
     2911, 2914, 2928, 2918, 2937, 2921, 2935, 2953, 2958, 2964,
     2970, 2960, 2979, 2991, 2997, 2993, 3014, 3016, 3003, 3009,

     3047, 3053, 3026, 3052, 3056, 3063, 3082, 3065, 3108, 3089,
     3092, 3066, 3099, 3103, 3105, 3134, 3115, 3121, 3132, 3122,
     3157, 3145, 3139, 3168, 3175, 3186, 3190, 3191, 3197, 3208,
     3202, 3207, 3258, 3226,  584,    0,    0, 2568,    0, 2650,
     2664,    0, 2766, 2781, 2811, 2836, 2897, 2909, 2922,    0,
     2915, 2944, 2980, 3000,    0, 3026, 3018, 3031, 3059, 3081,
     3157, 3167, 3209, 3217,    0, 3203, 3226, 3223, 3240,    0,
        0, 3229,    0,    0, 3232, 3234, 3246,    0,    0, 3258,
        0,    0, 3259, 3246, 3266, 3248, 3249,    0,    0, 3266,
     3252, 3270, 3258, 3260,    0, 3277, 3276,    0, 3286, 3287,

     3285, 3274,    0, 3294, 3300, 3284, 3304, 3306, 3294,    0,
     3304, 3308, 3309,    0, 3299, 3318,    0, 3342,    0,  561,
     3318, 3319, 3329, 3320, 3352, 3325, 3334, 3355, 3359, 3365,
     3361, 3390, 3392, 3376, 3388, 3397, 3401, 3415, 3399, 3426,
     3428, 3437, 3442, 3441, 3444, 3453, 3477, 3478, 3488, 3455,
     3484, 3493, 3495, 3518, 3507, 3511, 3529, 3522, 3533, 3545,
     3554, 3556, 3547, 3558, 3580, 3569, 3583, 3585, 3598, 3614,
     3601, 3615, 3619, 3625, 3632, 3636, 3655, 3637, 3648, 3666,
     3670, 3677, 3671, 3692, 3704, 3702, 3693, 3687, 3711, 3727,
     3734, 3737, 3746, 3744, 3743, 3749, 3768, 3758, 3773, 3784,

     3783, 3780, 3816, 3799,  555, 3323, 3327,    0, 3386, 3466,
     3456, 3510,    0, 3527,    0, 3549, 3596, 3626,    0, 3720,
        0, 3789,    0,    0, 3802,    0, 3796, 3794, 3806,    0,
        0,    0,    0,    0, 3813, 3818,    0,    0, 3804,    0,
     3813,    0,    0, 3807, 3819, 3820, 3825, 3809,    0, 3836,
     3837, 3822, 3825,    0,    0, 3833,    0, 3845, 3829, 3850,
        0,    0,    0,    0, 3847, 3845,  553, 3856, 3860, 3858,
     3861, 3859, 3875, 3885, 3873, 3910, 3874, 3896, 3914, 3900,
     3926, 3932, 3931, 3949, 3935, 3936, 3950, 3953, 3967, 3971,
     3968, 3965, 3982, 3989, 3992, 4003, 4005, 4022, 4006, 4007,

     4024, 4008, 4041, 4029, 4039, 4043, 4060, 4074, 4045, 4062,
     4075, 4081, 4085, 4084, 4100, 4096, 4097, 4127, 4115, 4138,
     4131, 4140, 4121, 4137, 4150, 4152, 4176, 3881,  555,    0,
     3968,    0,    0, 4153,    0,    0,  374, 4158,    0, 4156,
     4146,    0,    0,    0, 4162, 4175, 4170,    0,    0, 4187,
     4180, 4182,    0,    0, 4177, 4187,    0,    0,    0, 4179,
     4195, 4197,    0, 4189,  554, 4206, 4209, 4208, 4212, 4213,
     4227, 4231, 4243, 4242, 4244, 4245, 4267, 4248, 4249, 4258,
     4274, 4300, 4281, 4284, 4285, 4299, 4314, 4321, 4303, 4317,
     4335, 4340, 4336, 4339, 4353, 4357, 4366, 4370, 4371, 4239,

      547, 4341, 4348, 4402, 4364,    0,    0, 4378, 4377,    0,
     4380, 4386, 4394,    0,    0, 4393,    0, 4403, 4395,  539,
     4409, 4413, 4438, 4427, 4416, 4428, 4432, 4438, 4439, 4465,
     4463, 4469, 4468, 4474, 4501, 4484, 4508, 4409,  512, 4449,
      433, 4472, 4490,    0,    0, 4478,    0,    0, 4485,    0,
     4502,  500, 4514, 4551, 4493, 4519, 4530, 4537, 4540, 4541,
     4544, 4553, 4546, 4519,  478, 4519, 4602, 4534,    0,    0,
     4550, 4555,  477, 4595, 4610, 4559, 4586, 4590, 4593, 4582,
      470, 4600, 4604, 4611, 4816,    0, 4816,  452, 4609, 4608,
     4615,    0, 4620,    0,  425, 4608, 4607, 4613,  424, 4633,

     4631, 4636,  422, 4636, 4816, 4636,  408, 4658,    0, 4639,
      375,    0, 4656,  369, 4662, 4659,  366, 4655,  361, 4656,
      361, 4664,  314, 4665,  308, 4816,  305,    0,  311,  269,
      234,  194, 4816,    0, 4816, 4739, 4746, 4753, 4760,  181,
     4767, 4773, 4780, 4787, 4794, 4801, 4808
    } ;

static const flex_int16_t yy_def[1248] = {
	0,
     1235,    1, 1236, 1236, 1237, 1237, 1235,    7, 1238, 1238,
     1235, 1235, 1235, 1235, 1235, 1239, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1241,
     1235, 1235, 1242, 1235, 1243, 1243, 1235, 1243, 1244, 1243,
     1243, 1243, 1243, 1243, 1243, 1243, 1243, 1245, 1245,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69, 1246, 1243, 1247, 1235, 1235, 1235, 1235, 1239, 1235,

     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1241, 1235, 1242,
     1235, 1243, 1243, 1243, 1244, 1243, 1243, 1243, 1243, 1243,

     1243, 1243, 1243, 1243,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69, 1246, 1243, 1247, 1235, 1235, 1235, 1235, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,

     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1235, 1243,

     1243, 1243,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69, 1243, 1235, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,

     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1243,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69, 1235, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,

     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1235, 1240, 1243,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69, 1243,   69, 1235, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1235, 1243,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,

       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69, 1243, 1235, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1235, 1243,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69, 1243,

     1235, 1240, 1240, 1235, 1240, 1240, 1240, 1240, 1240, 1240,
     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1235, 1243,
       69,   69, 1243,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69, 1243, 1235, 1240,
     1240, 1235, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240,
     1235, 1243,   69,   69, 1243,   69,   69,   69,   69,   69,
       69,   69,   69, 1243, 1235, 1240, 1235, 1235, 1240, 1240,
     1240, 1235, 1243,   69, 1243, 1243,   69,   69,   69, 1243,
     1235, 1240, 1235, 1235, 1235, 1240, 1235, 1243,   69, 1243,
     1243, 1243,   69, 1243, 1235, 1240, 1235, 1235, 1243,   69,

     1243, 1243, 1235, 1240, 1235, 1235, 1243,   69, 1243, 1243,
     1235, 1240, 1235, 1243,   69, 1243, 1235, 1235, 1243, 1243,
     1235, 1235, 1243, 1243, 1235, 1235, 1243, 1243, 1235, 1243,
     1235, 1243, 1235, 1243,    0, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235
    } ;

static const flex_int16_t yy_nxt[4896] = {
	0,
       12,   13,   14,   15,   16,   17,   18,   17,   19,   20,
       21,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   42,   49,   42,
       12,   50,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   42,   49,   42,   51,   55,
       56,   57,   58,   59,   60,   61,   60,   62,   63,   60,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,

       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   87,   88,   89,   90,   84,   91,   84,   55,
       92,   68,   69,   70,   71,   72,   73,   74,   75,   76,
       77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
       87,   88,   89,   90,   84,   91,   84,   93,   95,   95,
       97,   97,  100,   96,   96,   97,   97,  106,  107,  193,
       97,   97,   97,  147,  101,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  104,  110,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  111,  118,  112,

      125,  147,  120,  129,  126,  113,  148,  114,  127,  121,
      130,  115,  116, 1234,  117,  131,  122,  128,  119,  123,
      201,  202,  124,  137,  187,  111,  118,  112,  125,  138,
      120,  129,  126,  113,  148,  114,  127,  121,  130,  115,
      116,  132,  117,  131,  122,  128,  119,  123,  139,  133,
      124,  137,  187, 1233,  155,  134,  140,  138,  135,  142,
      149,  136,  141,  290,  150,  143,  144,  145,  156,  132,
      151,  152,  146,  196,  157,  153,  139,  133,   97,   97,
     1232,  154,  155,  134,  140,  197,  135,  142,  149,  136,
      141,  290,  150,  143,  144,  145,  156,  163,  151,  152,

      146,  291,  157,  153,  158,  183,  296,  166,  164,  154,
      297,  167,  159,  184,  165,  168,  160,  185,  186,  161,
      162,  169, 1231,  298, 1230,  163,  180, 1229,  181,  291,
     1227,  182,  158,  183,  296,  166,  164,  243,  297,  167,
      159,  184,  165,  168,  160,  185,  186,  161,  162,  169,
      170,  298,  171,  176,  180,  172,  181,  205,  173,  182,
      177,  292,  174,  175,  304,  243,  311,  178,  312,  293,
      179,  193,   97,  818,  818, 1104, 1104, 1225,  170, 1223,
      171,  176,  319,  172, 1221,  205,  173, 1219,  177,  292,
      174,  175,  304, 1217,  311,  178,  312,  293,  179,  198,

      198,  198,  198,  198,  198,  198,  198,  198,  198,  199,
      319,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  192,  192, 1214,  192,  192,  192,  192,  192,  192,
      192,  192,  205,  294, 1167, 1167,  295, 1211,  320,  224,
     1207, 1203,  192,  192,  192,  234,  225,  302,  206,  205,
      207,  226,  205,  235,  303,  321,  208,  327,  209,  236,
      205,  294,  210,  211,  295,  212,  320,  224,  205,  205,
      328, 1199,  192,  234,  225,  302,  206,  205,  207,  226,
      205,  235,  303,  321,  208,  327,  209,  236,  205, 1195,
      210,  211,  205,  212, 1188, 1181,  205,  205,  328,  192,

      192,  192,  242,  192,  192,  192,  192,  192,  192,  192,
      192,  205,  205,  329, 1173,  282,  205,  309,  232,  330,
      205,  192,  192,  192,  233,  220, 1165,  310,  213,  221,
      242,  205,  331,  222,  244,  205,  317,  318,  245,  205,
      205,  329,  223,  282,  246,  309,  232,  330,  214,  205,
     1152,  192,  233,  220,  205,  310,  213,  221, 1139,  205,
      331,  222,  244,  205,  317,  318,  245, 1120, 1101,  332,
      223, 1065,  246, 1029,  333,  967,  214,  205,  192,  215,
      247,  250,  205,  205,  248,  205,  216,  305,  306,  307,
      249,  308,  334,  217,  337,  251,  218,  332,  905,  219,

      205,  252,  333,  205,  820,  205,  338,  215,  247,  250,
      339,  205,  248,  205,  216,  305,  306,  307,  249,  308,
      334,  217,  337,  251,  218,  340,  258,  219,  205,  252,
      205,  205,  227,  205,  338,  740,  205,  259,  339,  345,
      228,  735,  624,  260,  513,  335,  229,  512,  336,  230,
      205,  401,  231,  340,  258,  261,  205,  400,  205,  262,
      227,  205,  346,  263,  205,  259,  399,  345,  228,  264,
      275,  260,  276,  335,  229,  277,  336,  230,  205,  205,
      231,  205,  347,  261,  205,  205,  237,  262,  348,  205,
      346,  263,  238,  239,  240,  353,  354,  264,  275,  241,

      276,  355,  356,  277,  278,  205,  288,  205,  205,  205,
      347,  287,  279,  205,  237,  286,  348,  299,  300,  284,
      238,  239,  240,  353,  354,  359,  192,  241,  205,  355,
      356,  301,  278,  205,  205,  253,  205,  349,  205,  350,
      279,  280,  281,  254,  204,  299,  300,  255,  203,  357,
      256,  257,  358,  359,  205,  192,  205,  194,  205,  301,
      191,  360,  205,  253,  361,  349,  205,  350,  189,  280,
      281,  254,  351,  109,  352,  255,  313,  357,  256,  257,
      358,  314,  205,  265,  362,  266,  205,  315,  267,  360,
      108,  268,  361,  363,  316,  269,  270,  364,  365,  368,

      351,  322,  352,  323,  313,  205,  103,  324,  371,  314,
       98,  265,  362,  266,  325,  315,  267,  374,  326,  268,
     1235,  363,  316,  269,  270,  364,  365,  368,  366,  322,
       54,  323,  367,  205,  271,  324,  371,  341,  205,  369,
      375,  272,  325,  372,  370,  374,  326,  342,  273,  376,
      380,  274,  343,  344,  373,  381,  366,  377,  205,   54,
      367, 1235,  271, 1235, 1235,  341,  205,  369,  375,  272,
     1235,  372,  370, 1235, 1235,  342,  273,  376,  380,  274,
      343,  344,  373,  381, 1235,  377,  205,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  289,  289,  289,

      289,  289,  289,  289,  289,  289,  289,  104,  378,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  382,
      383,  384,  379,  385,  386,  388,  391,  392,  393,  394,
      396,  397,  389,  398,  514,  390,  378,  515,  516,  517,
      518,  519,  395,  520,  387, 1235, 1235,  382,  383,  384,
      379,  385,  386,  388,  391,  392,  393,  394,  396,  397,
      389,  398,  514,  390, 1235,  515,  516,  517,  518,  519,
      395,  520,  387,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  199,  205,  200,  200,  200,  200,  200,

      200,  200,  200,  200,  200,  403,  205,  407,  205,  205,
      408,  205,  205, 1235,  205,  521,  405, 1235, 1235,  410,
      522,  205,  205,  404,  406,  409,  205, 1235,  205,  205,
      205,  205,  205,  403,  205,  407,  205,  205,  408,  205,
      205,  205,  205,  521,  405,  411,  205,  410,  522,  205,
      205,  404,  406,  409,  205,  205,  205,  205,  205,  205,
      205,  205,  412,  413,  417,  205,  205,  422,  205,  205,
      526, 1235,  415,  411,  205,  425,  414,  423,  205,  416,
      527,  205,  528,  205, 1235,  205,  205,  205,  205,  205,
      412,  413,  417,  205,  205,  422,  205, 1235,  526,  424,

      415, 1235,  205,  425,  414,  423,  205,  416,  527,  205,
      528, 1235,  432,  205,  205,  205,  205,  205,  529,  205,
     1235,  205,  205, 1235,  418,  419,  420,  424,  421,  434,
      205,  205,  430,  431,  205,  433, 1235,  205, 1235,  205,
      432,  205, 1235, 1235,  205,  205,  529,  205,  205,  205,
      205,  205,  418,  419,  420,  440,  421,  434,  530,  205,
      430,  431, 1235,  433,  205,  205,  426,  205,  205,  205,
      205,  427,  205,  531, 1235,  205,  205,  428, 1235,  205,
      532, 1235,  441,  440,  429,  533,  530, 1235, 1235,  534,
      205, 1235,  205, 1235,  426,  205,  205, 1235,  205,  427,

      205,  531,  205,  205, 1235,  428,  205,  445,  532,  442,
      441,  535,  429,  533, 1235,  443,  444,  534,  205,  435,
      205,  436,  205,  205, 1235,  437,  205, 1235,  205, 1235,
      205,  205,  438, 1235,  205,  445,  439,  442,  536,  535,
      450,  205,  205,  443,  444,  205, 1235,  435,  205,  436,
      205,  205,  446,  437,  205,  447,  205,  205, 1235,  205,
      438,  205,  205,  539,  439,  205,  536, 1235,  450,  205,
      205,  448,  451,  205,  449,  205,  205,  205,  205,  205,
      446,  460,  452,  447,  205,  205,  453,  205,  205,  205,
      205,  539,  459,  205,  540,  205,  458, 1235,  205,  448,

      451,  541,  449,  205,  205,  205,  205,  205,  205,  460,
      452,  205,  461,  205,  453,  205,  205, 1235,  542,  462,
      459,  463,  540,  205,  458,  205,  205,  454,  205,  541,
      464,  205,  465,  205,  205,  205,  205,  455,  466,  205,
      461,  205,  456,  457, 1235,  205,  542,  462,  205,  463,
      543, 1235,  544,  205,  205,  454,  205,  545,  464,  205,
      465,  205,  205,  205,  205,  455,  466, 1235,  205,  205,
      456,  457,  467,  205,  205,  205,  205,  468,  543,  469,
      544,  472,  205,  205,  205,  545,  205,  473,  205,  205,
      470,  205,  205,  471,  205,  205,  205,  205,  474,  205,

      467,  546,  205,  205,  476,  468,  205,  469, 1235,  472,
      205,  205,  205, 1235,  205,  473,  205,  205,  470,  205,
      205,  471,  205,  205,  205,  475,  474,  205, 1235,  546,
      205,  478,  476,  477,  205,  205,  205,  479,  205, 1235,
      205,  480,  547, 1235, 1235,  481, 1235,  205,  205,  548,
     1235,  549,  205,  475, 1235,  205,  205,  205,  205,  478,
      205,  477,  205,  205,  205,  479, 1235,  485,  205,  480,
      547,  482,  205,  481,  484,  550,  483,  548,  486,  549,
      205,  497,  205,  205,  205,  205, 1235,  551,  205, 1235,
      205,  205,  205,  491,  487,  485,  488,  205,  205,  482,

      205,  205,  484,  550,  483,  489,  486,  492,  205,  497,
      205,  205,  205,  490,  205,  551,  493,  205,  205,  205,
      205,  491,  487, 1235,  488,  205,  205,  494,  496,  205,
      552,  205,  205,  489,  205,  492, 1235,  205,  553,  205,
      205,  490,  205,  495,  493,  205,  205,  205,  498,  499,
      205,  205, 1235,  205,  505,  494,  496,  205,  552,  205,
      205, 1235,  205,  504,  205,  205,  553,  205,  509,  500,
      205,  495,  554,  205, 1235,  205,  498,  499,  205,  205,
      501,  205,  505,  205,  205,  205,  205,  502,  205,  507,
      503,  504,  205,  506, 1235,  205,  509,  500,  205,  555,

      554,  205,  508,  205,  205,  537,  205,  556,  501,  205,
      557,  205,  205,  558,  205,  502,  205,  507,  503,  510,
      538,  506,  511,  523,  205,  524,  205,  555, 1235, 1235,
      508,  205,  205,  537,  205,  556, 1235,  205,  557,  559,
      525,  558,  560,  561,  562,  563,  205,  510,  538,  564,
      511,  523,  205,  524,  205,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  565,  566,  559,  525,  568,
      560,  561,  562,  563,  205,  569,  567,  564,  570,  571,
      572,  573,  574,  576,  577,  578,  579,  580,  581,  582,
      583,  584,  575,  565,  566,  585,  588,  568,  591,  592,

      593,  594,  586,  569,  567,  595,  570,  571,  572,  573,
      574,  576,  577,  578,  579,  580,  581,  582,  583,  584,
      575,  587,  589,  585,  588,  596,  591,  592,  593,  594,
      586,  597,  598,  595,  599,  590,  600,  601,  602,  603,
      604,  605,  606,  607,  608,  609,  611,  614,  615,  587,
      589,  616,  617,  596,  610,  612,  618,  613,  619,  597,
      598,  622,  599,  590,  600,  601,  602,  603,  604,  605,
      606,  607,  608,  609,  611,  614,  615,  620,  623,  616,
      617,  621,  610,  612,  618,  613,  619,  205,  625,  622,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,

      205,  626,  205,  205,  205,  620,  623,  205,  205,  621,
      627, 1235, 1235,  628,  736,  205,  625,  205,  737,  205,
      205,  205,  205,  205,  205, 1235, 1235, 1235,  205,  626,
      205,  205,  205,  205,  205,  205,  205,  205,  627,  641,
      205,  628,  736,  629,  630,  205,  737,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205, 1235,  632,  631,
      205,  205,  205,  633, 1235,  205, 1235,  641,  205,  205,
      205,  629,  630,  738,  739,  205,  205,  634,  639,  635,
      205,  205,  205,  205,  205,  638,  632,  631,  205,  205,
      205,  633,  642,  637,  636,  205,  205,  205,  205,  205,

      205,  738,  739,  205,  205,  634,  639,  635,  205, 1235,
      640,  205,  205,  638, 1235,  205,  205,  205,  205, 1235,
      642,  637,  636,  205,  205,  643,  645,  205,  205,  205,
      205,  205,  205, 1235, 1235,  651,  741,  646,  640,  205,
      205,  648,  644,  205,  205, 1235,  650,  647,  205,  205,
      205,  205,  205,  643,  645,  205,  649,  205,  205,  205,
      205,  205,  205,  651,  741,  646,  654,  652,  205,  648,
      644,  205,  205,  653,  650,  647,  205,  205,  205,  205,
      205,  655,  205,  205,  649,  205,  205,  656, 1235,  205,
      205,  205,  205,  742,  654,  652,  205,  662,  659,  205,

      205,  653,  657,  205,  205,  205,  658,  205,  205,  655,
      205,  205,  205,  205,  205,  656,  660,  205,  205,  205,
      205,  742,  661,  205,  205,  662,  659, 1235,  205,  205,
      657,  205,  205,  205,  658,  205,  205,  664,  205,  205,
      205,  205, 1235,  205,  660,  205,  205,  205,  663,  205,
      661,  205,  205,  743,  665,  666,  205,  205,  205,  667,
      205,  205, 1235,  205,  669,  664,  205,  205, 1235,  205,
      205,  205, 1235,  668, 1235,  205,  663,  205,  205,  205,
      205,  743,  665,  666,  205, 1235,  205,  667,  205,  205,
      205,  205,  669,  205,  670,  205,  205,  671,  205,  205,

      674,  668,  672,  673,  205, 1235,  205,  205,  205,  675,
     1235, 1235,  205,  205,  676, 1235,  205, 1235,  205,  205,
      205,  205,  670,  677,  205,  671,  205,  205,  674,  205,
      672,  673,  205,  678,  205,  679,  205,  675,  205,  205,
      682,  205,  676,  205,  205,  680,  205,  205,  205,  684,
      205,  677, 1235,  681,  205,  205,  205,  205,  205,  683,
      205,  678,  205,  679,  205,  205,  205,  205,  682, 1235,
      205,  205,  685,  680,  205,  205,  205,  684,  205,  205,
      689,  681,  686,  205,  205,  205,  205,  683,  205,  205,
     1235,  687,  205,  205, 1235,  688,  205,  691,  205,  205,

      685,  205,  205,  205,  205,  744,  694,  205,  689,  205,
      686,  745,  205,  205, 1235,  746,  695,  205,  690,  687,
      205,  205,  205,  688,  205,  691,  205,  205,  205,  205,
      205,  205,  205,  744,  694,  692,  205,  205, 1235,  745,
      205,  699,  205,  746,  695,  693,  690,  747,  205,  205,
      205,  205,  205,  697,  205,  696,  205,  205, 1235,  205,
      205, 1235,  205,  692,  205,  700,  205,  205,  748,  699,
      205,  749,  698,  693,  702,  747,  205,  205,  701,  205,
      205,  697, 1235,  696,  704,  205,  205,  205,  205,  205,
      205,  703, 1235,  700,  205,  205,  748,  750,  205,  749,

      698,  205,  702,  205,  706,  205,  701,  709,  205,  205,
      707, 1235,  704,  705,  205,  205,  205,  205,  205,  703,
      205,  205,  711,  205,  205,  750,  205,  205,  751,  205,
     1235,  205,  706,  205,  708,  709,  205,  205,  707,  205,
      205,  705,  205,  710,  205,  205,  205, 1235,  205,  205,
      711,  205,  205,  205,  752,  205,  751,  713,  712,  205,
      205,  205,  708,  205,  205,  205,  753,  205,  205,  205,
      205,  710,  205,  205,  714,  715,  717, 1235,  205,  716,
      205,  205,  752,  205,  205,  713,  712,  205,  205,  205,
      205,  205,  205,  205,  753,  754,  205,  205,  205,  718,

      720, 1235,  714,  715,  717,  719,  205,  716,  205,  721,
      205,  205,  205,  755, 1235,  205,  205,  205,  205,  205,
      205, 1235,  205,  754,  205,  722,  205,  718,  720,  723,
      726,  724,  725,  719,  205,  205,  205,  721,  205,  205,
     1235,  755,  205,  205,  205,  727,  756,  205,  205,  205,
      205, 1235,  757,  722,  205, 1235,  205,  723,  726,  724,
      725,  205,  205,  205,  205,  728,  758,  205,  205,  205,
      205,  759,  205,  727,  756,  733,  760,  205,  205,  729,
      757,  205,  205,  730,  205,  761, 1235,  731,  205,  205,
      762,  732,  205,  728,  758,  763,  205,  205,  205,  759,

      205,  205,  764,  733,  760,  765,  205,  729,  766,  205,
      767,  730,  768,  761,  734,  731,  205,  769,  762,  732,
      205,  205,  770,  763,  771,  772,  205,  773,  774,  205,
      764,  775,  776,  765,  777,  778,  766,  779,  767,  780,
      768,  781,  734,  782,  783,  769,  784,  785,  786,  205,
      770,  787,  771,  772,  788,  773,  774,  789,  790,  775,
      776,  791,  777,  778,  792,  779,  793,  780,  794,  781,
      795,  782,  783,  796,  784,  785,  786,  797,  798,  787,
      799,  800,  788,  801,  802,  789,  790,  803,  804,  791,
      805,  806,  792,  807,  793,  808,  794,  809,  795,  810,

      811,  796,  812,  813,  814,  797,  798,  815,  799,  800,
      816,  801,  802,  817,  819,  803,  804,  906,  805,  806,
      205,  807, 1235,  808,  205,  809,  205,  810,  811,  205,
      812,  813,  814,  821, 1235,  815,  205,  822,  816, 1235,
      205,  817,  819,  828,  205,  906,  823,  205,  205,  824,
      205, 1235,  205,  205,  205, 1235,  205,  205,  825,  827,
      826,  821,  829,  205,  205,  822,  205,  205,  205,  205,
      205,  828,  205,  205,  823,  205,  205,  824,  205,  830,
      205,  205,  907,  205,  205,  205,  205,  827,  826,  205,
      829,  205,  908,  831,  205,  205,  205,  205,  205,  205,

      205,  205,  205,  205,  205,  205,  832,  830,  205,  836,
      907,  205,  833,  205,  205, 1235,  205,  205, 1235,  205,
      908,  831,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  832,  205,  205,  836,  834,  835,
      833,  839,  837,  205,  205,  205,  205,  205,  838, 1235,
      205,  205,  205,  205,  205,  205, 1235,  205,  840,  205,
      205,  205,  205,  205,  205,  843,  834,  835,  205,  839,
      837,  205,  841,  205,  205,  842,  838,  205,  205,  205,
      205,  205,  205,  205,  205, 1235,  840,  205,  205,  205,
      205,  205, 1235,  843,  909,  844,  205,  205,  205, 1235,

      841,  205,  845,  842,  205,  205,  205,  205,  910,  205,
      205,  205,  205,  205,  848,  850,  205,  846,  205,  205,
      849,  205,  909,  844,  205,  205,  205,  205,  847,  205,
      845,  205,  205,  205,  205,  205,  910,  911,  205,  205,
      205,  205,  848,  850,  205,  846,  205,  205,  849,  205,
      851,  205,  205,  852,  205,  205,  847,  205, 1235,  205,
      205,  205,  205,  205,  205,  911,  205,  205,  205,  205,
      205,  856,  205,  912,  205,  205,  854,  205,  851,  205,
      853,  852,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  858,  205,  205,  857,  205,  205,  856,

      855,  912,  205,  205,  854,  205,  205,  205,  853,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      859,  858,  205,  860,  857,  205,  861,  205,  855,  205,
      205,  205,  862,  205,  205,  205,  205,  205,  205,  205,
      913,  205,  205, 1235,  205,  205,  205,  914,  859,  865,
      915,  860,  916,  205,  861,  205,  205,  205,  205,  205,
      862,  205,  205,  866,  205,  205,  205,  205,  913,  205,
      205,  863,  864,  205,  205,  914,  205,  865,  915, 1235,
      916,  205,  917,  205,  205,  205,  205,  205,  205,  869,
      205,  866,  205,  205,  205,  867,  868,  205,  205,  863,

      864,  205,  871, 1235,  205,  870,  205,  872,  205,  205,
      917,  205,  205,  205,  205,  918,  205,  869,  205,  205,
      205,  205, 1235,  867,  868,  205,  205,  205,  919,  205,
      871,  205,  873,  870,  205,  872,  205,  877,  874,  205,
      205,  205,  205,  918,  205,  205,  205,  205,  876,  205,
      875,  205, 1235,  205,  880,  205,  919,  205,  920,  205,
      873,  921,  205, 1235,  205,  877,  874,  205,  922,  205,
      205,  878,  205,  205,  205,  205,  876,  879,  875,  205,
      205,  205,  880, 1235,  205,  205,  920,  923,  881,  921,
      205,  205,  205,  205,  888,  205,  922,  882, 1235,  878,

      205,  205,  205,  205,  205,  879,  883,  884,  205,  205,
      205,  205,  205,  205,  205,  923,  881,  205,  887,  205,
      205,  205,  888,  205,  924,  882,  886,  205,  205,  205,
      205,  205,  205,  889,  883,  884,  205,  205,  205,  205,
      205,  205,  205,  891,  885,  205,  887,  205,  205,  205,
      205,  205,  924,  205,  886,  205,  205, 1235,  205,  205,
      205,  889,  205,  205,  205,  205,  890,  205,  205,  205,
      205,  891,  885,  205,  892,  205,  895,  205,  205,  205,
      205,  205,  205,  893,  205,  205, 1235,  205,  205,  894,
      205,  205, 1235,  205,  890,  205,  205,  205,  205,  897,

      925,  205,  892,  205,  895,  205, 1235, 1235,  205,  926,
      205,  893,  896,  205,  205,  205,  205,  894,  205,  900,
      899,  205, 1235,  205,  205,  205, 1235,  897,  925,  898,
      205,  205, 1235,  205,  205,  902,  205,  926,  205,  205,
      896,  927,  205,  928,  205,  205,  205,  900,  899,  929,
      205,  205,  901,  205,  205,  205,  205,  898,  205,  903,
      818,  930,  205,  902,  205,  931,  205,  205,  904,  927,
      932,  928,  933,  205,  205,  934,  935,  929,  205,  936,
      901,  937,  205,  205,  205,  938,  205,  939,  940,  930,
      941,  942,  943,  931,  944,  945,  904,  946,  932,  947,

      933,  948,  205,  934,  935,  949,  205,  936,  950,  937,
      951,  952,  953,  938,  205,  939,  940,  954,  941,  942,
      943,  955,  944,  945,  956,  946,  957,  947,  958,  948,
      959,  960,  961,  949,  205,  962,  950,  963,  951,  952,
      953,  964,  965,  818,  818,  954,  205,  205,  205,  955,
     1235, 1030,  956,  970,  957, 1235,  958,  205,  959,  960,
      961, 1235,  205,  962, 1031,  963,  205,  205,  205,  964,
      965,  966, 1235,  205,  205,  205,  205,  205,  968, 1030,
      205,  970,  205,  971,  969,  205,  972,  205, 1235,  205,
      205,  973, 1031,  205,  205,  205,  205, 1235,  974,  966,

      205,  205, 1235,  205,  977,  205,  968,  205,  205,  205,
      205,  971,  969,  205,  972,  205,  205,  205,  205,  973,
      205,  205, 1235, 1032,  205,  205,  974,  981,  205,  205,
      976,  205,  977,  975,  978,  205,  205,  205,  205,  979,
      205,  205, 1235,  205,  205,  205,  205,  205,  205,  205,
      980, 1032,  205,  205,  205,  981,  205,  205,  976, 1235,
      982,  975,  978,  205,  205,  205,  205,  979,  205,  985,
      205,  205,  205,  205,  205,  205,  205,  205,  980,  984,
      983,  205,  205,  205,  205,  205, 1235,  986,  982,  205,
      205,  205,  205,  205, 1033, 1235,  987,  985,  205, 1034,

      205,  205,  205,  205,  205,  205,  205,  984,  983,  205,
      989,  205,  205,  205,  990,  986,  205,  205,  205,  988,
      205,  205, 1033,  205,  987,  205,  205, 1034,  992,  205,
      991,  205,  205,  205,  205,  205,  205,  993,  989,  205,
      205,  205,  990,  205,  205, 1235,  205,  988,  994,  205,
      205,  205, 1035,  205,  205,  205,  992,  205,  991,  205,
      205,  205, 1036,  205,  205,  993,  205,  205, 1235,  205,
      205,  205,  995,  205,  205,  205,  994,  205,  205, 1235,
     1035,  205,  205,  205,  205,  205,  205,  205,  996,  205,
     1036,  999, 1037,  205,  205,  205,  997,  205,  205,  998,

      995,  205,  205,  205,  205,  205,  205, 1000,  205,  205,
      205,  205,  205, 1001,  205, 1235,  996,  205, 1235,  999,
     1037,  205, 1038,  205,  997,  205,  205,  998,  205,  205,
      205,  205,  205,  205,  205, 1000,  205, 1235, 1003,  205,
     1002, 1001,  205,  205, 1004,  205,  205,  205, 1235,  205,
     1038, 1235, 1235,  205,  205, 1235,  205,  205, 1005,  205,
     1006,  205,  205,  205,  205,  205, 1003,  205, 1002, 1039,
      205,  205, 1004,  205,  205,  205,  205,  205, 1009, 1007,
      205,  205, 1008,  205,  205,  205, 1005, 1235, 1006, 1010,
      205,  205,  205,  205,  205,  205,  205, 1039, 1011,  205,

     1235,  205, 1235,  205,  205,  205, 1009, 1007,  205, 1012,
     1008,  205,  205,  205,  205,  205, 1013, 1010,  205,  205,
      205,  205,  205, 1235,  205,  205, 1011,  205, 1014, 1015,
      205,  205,  205,  205, 1235,  205, 1016, 1012, 1017,  205,
      205,  205,  205,  205, 1013, 1040,  205,  205,  205,  205,
      205, 1018,  205,  205, 1235,  205, 1014, 1015,  205,  205,
      205, 1020,  205,  205, 1016,  205, 1017,  205,  205,  205,
     1021,  205,  205, 1040,  205,  205, 1019, 1023,  205, 1018,
      205, 1022,  205,  205, 1235,  205, 1025,  205, 1235, 1020,
      205,  205,  205,  205,  205, 1024,  205,  205, 1021,  205,

      205,  205,  205,  205, 1019, 1023,  205, 1027,  205, 1022,
      205,  205,  205,  205, 1025, 1041,  205,  903,  818,  205,
      205,  205,  205, 1024,  205,  205, 1026,  205,  205,  205,
     1042,  205,  205, 1043,  205, 1027,  205, 1044, 1045,  205,
      205, 1046, 1047, 1041,  205, 1028, 1048,  205, 1049,  205,
     1050, 1051, 1052, 1053, 1026,  205,  205, 1054, 1042,  205,
      205, 1043, 1055, 1056, 1057, 1044, 1045, 1058, 1059, 1046,
     1047, 1060, 1061, 1028, 1048,  205, 1049, 1062, 1050, 1051,
     1052, 1053, 1063, 1064, 1066, 1054,  205, 1069,  205,  205,
     1055, 1056, 1057, 1235, 1235, 1058, 1059, 1067, 1068, 1060,

     1061,  205,  205,  205,  205, 1062,  205,  205,  205,  205,
     1063, 1064, 1066,  205,  205, 1069,  205,  205, 1070, 1100,
     1235,  205,  205,  205,  205, 1067, 1068, 1071,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205, 1073,
     1074,  205,  205, 1075,  205, 1072, 1070, 1100,  205,  205,
      205,  205,  205, 1235,  205, 1071,  205, 1076,  205,  205,
      205,  205,  205,  205,  205, 1235,  205, 1073, 1074, 1235,
      205, 1075,  205, 1072,  205, 1077,  205,  205, 1078,  205,
      205,  205,  205,  205,  205, 1076,  205,  205,  205, 1235,
      205,  205,  205,  205, 1102,  205,  205,  205,  205,  205,

     1081,  205,  205, 1077, 1079,  205, 1078,  205,  205,  205,
      205,  205,  205,  205, 1080,  205,  205,  205, 1235,  205,
      205,  205, 1102,  205,  205,  205,  205,  205, 1081,  205,
      205,  205, 1079, 1082,  205,  205,  205,  205,  205, 1235,
      205,  205, 1080,  205,  205,  205, 1083,  205,  205, 1235,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
     1235, 1082,  205,  205,  205,  205, 1084,  205,  205,  205,
      205,  205,  205, 1089, 1083, 1235, 1085,  205,  205,  205,
      205,  205,  205,  205,  205,  205, 1086,  205,  205,  205,
      205,  205, 1087,  205, 1084,  205, 1235,  205,  205,  205,

      205, 1089,  205,  205, 1085,  205, 1088, 1091,  205,  205,
     1090, 1092,  205,  205, 1086,  205,  205,  205,  205,  205,
     1087,  205,  205,  205,  205,  205, 1093, 1235,  205,  205,
      205,  205,  205,  205, 1088, 1091,  205,  205, 1090, 1092,
      205,  205, 1094,  205,  205,  205, 1235, 1235,  205,  205,
      205,  205,  205,  205, 1093,  205,  205,  205, 1235,  205,
      205,  205, 1095,  205, 1096,  205,  205, 1098,  205,  205,
     1094,  205,  205,  205, 1097,  205,  205,  205,  205,  205,
      205, 1103, 1105,  205, 1106,  205,  205,  205,  205, 1107,
     1095,  205, 1096,  205,  205, 1098,  205,  205,  205, 1108,

      205, 1109, 1097,  205,  205, 1110,  205,  205,  205, 1103,
     1105, 1099, 1106,  205,  205, 1111,  205, 1107, 1112, 1113,
     1114, 1115, 1116, 1117,  205, 1118,  205, 1108,  205, 1109,
     1119, 1235,  205, 1110,  205, 1121,  205,  205, 1235, 1099,
      205, 1122, 1235, 1111, 1123, 1104, 1112, 1113, 1114, 1115,
     1116, 1117,  205, 1118,  205,  205,  205,  205, 1119,  205,
      205,  205,  205, 1121,  205,  205, 1124, 1235,  205, 1122,
      205,  205,  205, 1125, 1235,  205,  205,  205, 1235,  205,
     1138, 1235,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205, 1124,  205,  205,  205,  205,  205,

      205, 1125,  205,  205,  205,  205,  205,  205, 1138,  205,
     1126, 1127,  205,  205,  205,  205, 1129, 1235,  205,  205,
      205,  205,  205,  205,  205,  205, 1128, 1130,  205,  205,
      205,  205,  205,  205,  205, 1235, 1235,  205, 1126, 1127,
      205,  205,  205,  205, 1129,  205, 1235,  205,  205,  205,
      205,  205, 1131, 1235, 1128, 1130,  205,  205, 1132,  205,
      205,  205,  205,  205,  205,  205, 1235,  205,  205,  205,
      205, 1235, 1235,  205, 1134,  205,  205,  205, 1133,  205,
     1131,  205, 1140,  205,  205,  205, 1132,  205,  205, 1141,
      205,  205,  205,  205, 1136,  205,  205,  205, 1137,  205,

     1135,  205, 1134, 1104, 1104,  205, 1133, 1143, 1144,  205,
     1140,  205,  205,  205,  205,  205,  205, 1141,  205,  205,
     1145, 1146, 1136, 1147, 1148, 1149, 1137,  205, 1135,  205,
     1150, 1151, 1235,  205, 1235, 1143, 1144,  205, 1235, 1123,
     1104,  205,  205, 1142,  205, 1164,  205,  205, 1145, 1146,
     1153, 1147, 1148, 1149, 1154,  205,  205,  205, 1150, 1151,
      205,  205, 1157, 1235,  205,  205,  205,  205, 1235,  205,
     1156, 1142,  205, 1164, 1235,  205,  205, 1166, 1153, 1155,
      205, 1158, 1154,  205,  205,  205,  205,  205,  205,  205,
     1157,  205,  205,  205,  205,  205,  205,  205, 1156, 1161,

     1160, 1235,  205,  205,  205, 1166, 1159, 1155,  205, 1158,
     1168,  205,  205,  205,  205,  205,  205,  205, 1169,  205,
     1170,  205,  205, 1171,  205,  205, 1172, 1161, 1160,  205,
      205, 1176,  205, 1162, 1159, 1163,  205, 1235, 1168,  205,
      205,  205, 1174, 1180,  205,  205, 1169, 1177, 1170,  205,
      205, 1171, 1175, 1167, 1172, 1182,  205,  205,  205, 1176,
      205, 1162,  205, 1163,  205,  205, 1235,  205,  205,  205,
     1174, 1180,  205, 1235,  205, 1177, 1235,  205,  205,  205,
     1185,  205, 1178, 1182,  205,  205,  205, 1186,  205,  205,
      205, 1179,  205,  205,  205,  205,  205,  205, 1187,  205,

      205,  205,  205, 1167, 1167, 1192,  205,  205, 1185,  205,
     1178, 1175, 1167,  205,  205, 1186,  205,  205,  205, 1179,
      205,  205,  205,  205, 1235, 1194, 1187,  205, 1196,  205,
     1193, 1189, 1197, 1192,  205, 1198, 1201, 1200,  205, 1202,
     1235,  205,  205,  205, 1183, 1204,  205, 1184,  205,  205,
     1205,  205, 1190, 1194, 1206, 1191, 1196,  205, 1193, 1189,
     1197,  205,  205, 1198, 1201, 1200,  205, 1202,  205,  205,
     1208,  205, 1183, 1204, 1209, 1184,  205, 1210, 1205, 1212,
     1190,  205, 1206, 1191, 1213,  205,  205, 1216, 1218,  205,
      205, 1220, 1222, 1224, 1226, 1228,  205, 1235, 1208, 1235,

     1235, 1215, 1209, 1235, 1235, 1210,  205, 1212, 1235,  205,
      205, 1235, 1213, 1235,  205, 1216, 1218, 1235,  205, 1220,
     1222, 1224, 1226, 1228, 1235, 1235, 1235, 1235, 1235, 1215,
     1235, 1235, 1235, 1235,  205, 1235, 1235, 1235,  205,   52,
       52,   52,   52,   52,   52,   52,   53,   53,   53,   53,
       53,   53,   53,   94,   94,   94,   94,   94,   94,   94,
       99, 1235, 1235,   99,   99,   99,   99,  188, 1235,  188,
      188,  188,  188,  190,  190,  190, 1235,  190,  190,  190,
      192, 1235,  192,  192,  192,  192,  192,  195, 1235,  195,
      195,  195,  195,  195,  205, 1235,  205,  205,  205,  205,

      205,  283, 1235,  283,  283,  283,  283,  283,  285, 1235,
      285,  285, 1235,  285,  285,   11, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235

    } ;

static const flex_int16_t yy_chk[4896] = {
	0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    9,   10,
       13,   13,   19,    9,   10,   14,   14,   23,   23,   56,
       56,   57,   57,   35,   19,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   22, 1240,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   26,   27,   26,

       29,   35,   28,   30,   29,   26,   36,   26,   29,   28,
       30,   26,   26, 1232,   26,   30,   28,   29,   27,   28,
       65,   65,   28,   32,   49,   26,   27,   26,   29,   32,
       28,   30,   29,   26,   36,   26,   29,   28,   30,   26,
       26,   31,   26,   30,   28,   29,   27,   28,   33,   31,
       28,   32,   49, 1231,   39,   31,   33,   32,   31,   34,
       37,   31,   33,  111,   37,   34,   34,   34,   39,   31,
       37,   38,   34,   62,   39,   38,   33,   31,   97,   97,
     1230,   38,   39,   31,   33,   62,   31,   34,   37,   31,
       33,  111,   37,   34,   34,   34,   39,   41,   37,   38,

       34,  112,   39,   38,   40,   47,  115,   43,   41,   38,
      116,   43,   40,   47,   41,   43,   40,   48,   48,   40,
       40,   43, 1229,  117, 1227,   41,   46, 1225,   46,  112,
     1223,   46,   40,   47,  115,   43,   41,   78,  116,   43,
       40,   47,   41,   43,   40,   48,   48,   40,   40,   43,
       44,  117,   44,   45,   46,   44,   46,   78,   44,   46,
       45,  113,   44,   44,  121,   78,  124,   45,  125,  113,
       45,  193,  193,  622,  622, 1037, 1037, 1221,   44, 1219,
       44,   45,  128,   44, 1217,   78,   44, 1214,   45,  113,
       44,   44,  121, 1211,  124,   45,  125,  113,   45,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   64,
      128,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   68,   68, 1207,   68,   68,   68,   68,   68,   68,
       68,   68,   72,  114, 1141, 1141,  114, 1203,  129,   72,
     1199, 1195,   68,   68,   68,   75,   72,  120,   68,   75,
       68,   72,   72,   75,  120,  130,   68,  132,   68,   75,
       72,  114,   68,   68,  114,   68,  129,   72,   84,   75,
      133, 1188,   68,   75,   72,  120,   68,   75,   68,   72,
       72,   75,  120,  130,   68,  132,   68,   75,   84, 1181,
       68,   68,   77,   68, 1173, 1165,   84,   75,  133,   68,

       69,   69,   77,   69,   69,   69,   69,   69,   69,   69,
       69,   74,   77,  134, 1152,   91,   84,  123,   74,  134,
       77,   69,   69,   69,   74,   71, 1139,  123,   69,   71,
       77,   74,  135,   71,   79,   91,  127,  127,   79,   74,
       77,  134,   71,   91,   79,  123,   74,  134,   69,   71,
     1120,   69,   74,   71,   79,  123,   69,   71, 1101,   74,
      135,   71,   79,   91,  127,  127,   79, 1065, 1029,  136,
       71,  967,   79,  905,  137,  820,   69,   71,   69,   70,
       80,   81,   79,   70,   80,   81,   70,  122,  122,  122,
       80,  122,  138,   70,  140,   81,   70,  136,  735,   70,

       80,   81,  137,   70,  624,   81,  141,   70,   80,   81,
      143,   70,   80,   81,   70,  122,  122,  122,   80,  122,
      138,   70,  140,   81,   70,  144,   83,   70,   80,   81,
       83,   70,   73,   81,  141,  518,   73,   83,  143,  146,
       73,  513,  401,   83,  288,  139,   73,  283,  139,   73,
       83,  197,   73,  144,   83,   85,   73,  195,   83,   85,
       73,   88,  147,   85,   73,   83,  188,  146,   73,   85,
       88,   83,   88,  139,   73,   88,  139,   73,   83,   85,
       73,   88,  148,   85,   73,   76,   76,   85,  149,   88,
      147,   85,   76,   76,   76,  152,  153,   85,   88,   76,

       88,  154,  155,   88,   89,   76,  101,   85,   89,   88,
      148,   99,   89,   76,   76,   96,  149,  118,  118,   93,
       76,   76,   76,  152,  153,  157,   92,   76,   89,  154,
      155,  118,   89,   76,   82,   82,   89,  150,   90,  150,
       89,   90,   90,   82,   67,  118,  118,   82,   66,  156,
       82,   82,  156,  157,   82,   59,   89,   58,   90,  118,
       54,  158,   82,   82,  160,  150,   90,  150,   51,   90,
       90,   82,  151,   25,  151,   82,  126,  156,   82,   82,
      156,  126,   82,   86,  161,   86,   90,  126,   86,  158,
       24,   86,  160,  162,  126,   86,   86,  163,  164,  166,

      151,  131,  151,  131,  126,   86,   21,  131,  168,  126,
       15,   86,  161,   86,  131,  126,   86,  170,  131,   86,
       11,  162,  126,   86,   86,  163,  164,  166,  165,  131,
        6,  131,  165,   86,   87,  131,  168,  145,   87,  167,
      171,   87,  131,  169,  167,  170,  131,  145,   87,  171,
      173,   87,  145,  145,  169,  174,  165,  171,   87,    5,
      165,    0,   87,    0,    0,  145,   87,  167,  171,   87,
        0,  169,  167,    0,    0,  145,   87,  171,  173,   87,
      145,  145,  169,  174,    0,  171,   87,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  104,  104,  104,

      104,  104,  104,  104,  104,  104,  104,  105,  172,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  175,
      176,  177,  172,  178,  179,  180,  181,  182,  183,  184,
      185,  186,  180,  187,  291,  180,  172,  293,  294,  296,
      298,  299,  184,  300,  179,    0,    0,  175,  176,  177,
      172,  178,  179,  180,  181,  182,  183,  184,  185,  186,
      180,  187,  291,  180,    0,  293,  294,  296,  298,  299,
      184,  300,  179,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  200,  205,  200,  200,  200,  200,  200,

      200,  200,  200,  200,  200,  206,  206,  209,  207,  208,
      209,  209,  210,    0,  205,  301,  208,    0,    0,  211,
      302,  211,  205,  207,  208,  210,  206,    0,  207,  208,
      212,  209,  210,  206,  206,  209,  207,  208,  209,  209,
      210,  211,  205,  301,  208,  212,  214,  211,  302,  211,
      212,  207,  208,  210,  206,  220,  207,  208,  212,  209,
      210,  213,  213,  213,  216,  215,  214,  218,  216,  211,
      304,    0,  215,  212,  214,  220,  213,  218,  212,  215,
      305,  213,  306,  220,    0,  215,  219,  218,  216,  213,
      213,  213,  216,  215,  214,  218,  216,    0,  304,  219,

      215,    0,  223,  220,  213,  218,  219,  215,  305,  213,
      306,    0,  223,  215,  219,  218,  216,  217,  307,  222,
        0,  224,  223,    0,  217,  217,  217,  219,  217,  225,
      223,  225,  222,  222,  219,  224,    0,  217,    0,  222,
      223,  224,    0,    0,  237,  217,  307,  222,  227,  224,
      223,  225,  217,  217,  217,  227,  217,  225,  308,  225,
      222,  222,    0,  224,  237,  217,  221,  222,  227,  224,
      221,  221,  237,  309,    0,  228,  227,  221,    0,  225,
      310,    0,  228,  227,  221,  311,  308,    0,    0,  312,
      221,    0,  237,    0,  221,  228,  227,    0,  221,  221,

      231,  309,  229,  228,    0,  221,  230,  231,  310,  229,
      228,  313,  221,  311,    0,  229,  230,  312,  221,  226,
      231,  226,  229,  228,    0,  226,  230,    0,  231,    0,
      229,  235,  226,    0,  230,  231,  226,  229,  314,  313,
      235,  226,  232,  229,  230,  233,    0,  226,  231,  226,
      229,  235,  232,  226,  230,  233,  236,  234,    0,  235,
      226,  243,  232,  316,  226,  233,  314,    0,  235,  226,
      232,  234,  236,  233,  234,  239,  236,  234,  238,  235,
      232,  243,  238,  233,  236,  234,  239,  241,  242,  243,
      232,  316,  242,  233,  317,  239,  241,    0,  238,  234,

      236,  318,  234,  239,  236,  234,  238,  241,  242,  243,
      238,  244,  244,  245,  239,  241,  242,    0,  319,  245,
      242,  245,  317,  239,  241,  247,  238,  240,  240,  318,
      246,  244,  246,  245,  246,  241,  242,  240,  247,  244,
      244,  245,  240,  240,    0,  247,  319,  245,  240,  245,
      320,    0,  321,  247,  246,  240,  240,  322,  246,  244,
      246,  245,  246,  248,  250,  240,  247,    0,  249,  254,
      240,  240,  248,  247,  252,  251,  240,  249,  320,  250,
      321,  252,  246,  248,  250,  322,  253,  253,  249,  254,
      251,  248,  250,  251,  252,  251,  249,  254,  255,  255,

      248,  323,  252,  251,  257,  249,  253,  250,    0,  252,
      256,  248,  250,    0,  253,  253,  249,  254,  251,  255,
      258,  251,  252,  251,  257,  256,  255,  255,    0,  323,
      256,  259,  257,  258,  253,  259,  261,  260,  256,    0,
      258,  260,  324,    0,    0,  261,    0,  255,  258,  325,
        0,  326,  257,  256,    0,  259,  261,  260,  256,  259,
      264,  258,  262,  259,  261,  260,    0,  264,  258,  260,
      324,  262,  263,  261,  263,  327,  262,  325,  264,  326,
      264,  272,  262,  259,  261,  260,    0,  328,  264,    0,
      262,  265,  263,  267,  265,  264,  266,  267,  266,  262,

      263,  272,  263,  327,  262,  266,  264,  267,  264,  272,
      262,  265,  268,  266,  269,  328,  268,  267,  266,  265,
      263,  267,  265,    0,  266,  267,  266,  269,  271,  272,
      329,  271,  268,  266,  269,  267,    0,  273,  331,  265,
      268,  266,  269,  270,  268,  267,  266,  270,  273,  274,
      277,  271,    0,  274,  277,  269,  271,  273,  329,  271,
      268,    0,  269,  276,  276,  273,  331,  270,  280,  274,
      277,  270,  332,  274,    0,  270,  273,  274,  277,  271,
      275,  274,  277,  275,  276,  273,  278,  275,  280,  279,
      275,  276,  276,  278,    0,  270,  280,  274,  277,  333,

      332,  274,  279,  275,  281,  315,  278,  334,  275,  279,
      335,  275,  276,  336,  278,  275,  280,  279,  275,  281,
      315,  278,  282,  303,  281,  303,  282,  333,    0,    0,
      279,  275,  281,  315,  278,  334,    0,  279,  335,  337,
      303,  336,  338,  339,  340,  341,  282,  281,  315,  342,
      282,  303,  281,  303,  282,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  343,  344,  337,  303,  345,
      338,  339,  340,  341,  282,  346,  344,  342,  348,  349,
      350,  351,  352,  353,  354,  355,  356,  358,  359,  360,
      361,  362,  352,  343,  344,  363,  365,  345,  367,  368,

      369,  370,  364,  346,  344,  371,  348,  349,  350,  351,
      352,  353,  354,  355,  356,  358,  359,  360,  361,  362,
      352,  364,  366,  363,  365,  372,  367,  368,  369,  370,
      364,  373,  374,  371,  375,  366,  376,  378,  379,  380,
      381,  382,  383,  384,  386,  387,  388,  390,  391,  364,
      366,  392,  393,  372,  387,  389,  394,  389,  395,  373,
      374,  397,  375,  366,  376,  378,  379,  380,  381,  382,
      383,  384,  386,  387,  388,  390,  391,  396,  398,  392,
      393,  396,  387,  389,  394,  389,  395,  403,  404,  397,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,

      405,  406,  408,  407,  410,  396,  398,  403,  404,  396,
      407,    0,    0,  409,  514,  403,  404,  409,  515,  421,
      405,  406,  408,  407,  410,    0,    0,    0,  405,  406,
      408,  407,  410,  411,  412,  403,  404,  409,  407,  421,
      414,  409,  514,  411,  412,  409,  515,  421,  405,  406,
      408,  407,  410,  411,  412,  413,  415,    0,  414,  413,
      414,  411,  412,  415,    0,  409,    0,  421,  414,  418,
      419,  411,  412,  516,  517,  413,  415,  416,  419,  416,
      417,  411,  412,  413,  415,  418,  414,  413,  414,  418,
      419,  415,  422,  417,  416,  420,  422,  418,  419,  416,

      417,  516,  517,  413,  415,  416,  419,  416,  417,    0,
      420,  423,  425,  418,    0,  420,  422,  418,  419,    0,
      422,  417,  416,  420,  422,  423,  425,  416,  417,  424,
      426,  423,  425,    0,    0,  430,  519,  426,  420,  423,
      425,  428,  424,  420,  422,    0,  429,  427,  429,  424,
      426,  427,  431,  423,  425,  430,  428,  424,  426,  423,
      425,  428,  432,  430,  519,  426,  433,  431,  429,  428,
      424,  427,  431,  432,  429,  427,  429,  424,  426,  427,
      431,  434,  432,  430,  428,  434,  433,  435,    0,  428,
      432,  438,  437,  520,  433,  431,  429,  441,  438,  427,

      431,  432,  436,  439,  436,  434,  437,  435,  440,  434,
      432,  438,  437,  434,  433,  435,  439,  441,  443,  438,
      437,  520,  440,  439,  436,  441,  438,    0,  440,  444,
      436,  439,  436,  434,  437,  435,  440,  444,  443,  438,
      437,  442,    0,  447,  439,  441,  443,  445,  442,  444,
      440,  439,  436,  521,  445,  446,  440,  444,  446,  447,
      449,  442,    0,  447,  449,  444,  443,  445,    0,  442,
      448,  447,    0,  448,    0,  445,  442,  444,  446,  450,
      449,  521,  445,  446,  451,    0,  446,  447,  449,  442,
      448,  447,  449,  453,  450,  445,  452,  451,  448,  450,

      454,  448,  452,  453,  451,    0,  446,  450,  449,  455,
        0,    0,  451,  453,  456,    0,  452,    0,  448,  458,
      454,  453,  450,  457,  452,  451,  460,  450,  454,  455,
      452,  453,  451,  457,  456,  458,  459,  455,  461,  458,
      462,  453,  456,  457,  452,  459,  460,  458,  454,  464,
      464,  457,    0,  461,  460,  463,  459,  455,  461,  463,
      462,  457,  456,  458,  459,  468,  461,  458,  462,    0,
      464,  457,  465,  459,  460,  463,  465,  464,  464,  467,
      468,  461,  465,  463,  459,  468,  461,  463,  462,  466,
        0,  466,  470,  468,    0,  467,  465,  471,  464,  467,

      465,  471,  469,  463,  465,  523,  474,  467,  468,  466,
      465,  526,  470,  468,    0,  527,  475,  466,  469,  466,
      470,  471,  469,  467,  465,  471,  474,  467,  472,  471,
      469,  473,  478,  523,  474,  472,  475,  466,    0,  526,
      470,  478,  476,  527,  475,  473,  469,  528,  472,  471,
      469,  473,  478,  477,  474,  476,  472,  477,    0,  473,
      478,    0,  476,  472,  475,  479,  480,  479,  529,  478,
      476,  531,  477,  473,  480,  528,  472,  477,  479,  473,
      478,  477,    0,  476,  482,  477,  480,  479,  482,  481,
      476,  481,    0,  479,  480,  479,  529,  532,  483,  531,

      477,  484,  480,  485,  484,  477,  479,  487,  482,  481,
      485,    0,  482,  483,  480,  479,  482,  481,  483,  481,
      486,  484,  489,  485,  490,  532,  483,  487,  533,  484,
        0,  485,  484,  488,  486,  487,  482,  481,  485,  492,
      486,  483,  489,  488,  490,  491,  483,    0,  486,  484,
      489,  485,  490,  488,  535,  487,  533,  492,  491,  492,
      494,  488,  486,  493,  495,  491,  536,  492,  486,  496,
      489,  488,  490,  491,  493,  494,  496,    0,  498,  495,
      494,  488,  535,  493,  495,  492,  491,  492,  494,  496,
      497,  493,  495,  491,  536,  537,  499,  496,  498,  497,

      500,    0,  493,  494,  496,  499,  498,  495,  494,  500,
      497,  493,  495,  538,    0,  501,  499,  496,  497,  502,
      500,    0,  503,  537,  499,  501,  498,  497,  500,  502,
      504,  502,  503,  499,  504,  501,  505,  500,  497,  502,
        0,  538,  503,  501,  499,  505,  539,  502,  500,  506,
      503,    0,  540,  501,  504,    0,  505,  502,  504,  502,
      503,  507,  504,  501,  505,  506,  541,  502,  508,  506,
      503,  544,  510,  505,  539,  510,  545,  506,  509,  507,
      540,  507,  504,  508,  505,  546,    0,  509,  508,  507,
      547,  509,  510,  506,  541,  548,  508,  506,  509,  544,

      510,  511,  549,  510,  545,  550,  509,  507,  552,  507,
      555,  508,  556,  546,  511,  509,  508,  558,  547,  509,
      510,  511,  560,  548,  561,  562,  509,  563,  564,  511,
      549,  565,  566,  550,  568,  572,  552,  574,  555,  575,
      556,  576,  511,  577,  577,  558,  578,  579,  580,  511,
      560,  582,  561,  562,  583,  563,  564,  584,  586,  565,
      566,  587,  568,  572,  589,  574,  590,  575,  591,  576,
      592,  577,  577,  593,  578,  579,  580,  594,  595,  582,
      596,  598,  583,  599,  600,  584,  586,  601,  604,  587,
      605,  606,  589,  608,  590,  610,  591,  611,  592,  612,

      613,  593,  614,  615,  616,  594,  595,  617,  596,  598,
      619,  599,  600,  621,  623,  601,  604,  738,  605,  606,
      625,  608,    0,  610,  626,  611,  627,  612,  613,  628,
      614,  615,  616,  625,    0,  617,  629,  626,  619,    0,
      625,  621,  623,  632,  626,  738,  627,  630,  625,  628,
      631,    0,  626,  633,  627,    0,  629,  628,  629,  631,
      630,  625,  634,  632,  629,  626,  634,  630,  625,  635,
      631,  632,  626,  633,  627,  630,  636,  628,  631,  637,
      641,  633,  740,  637,  629,  638,  634,  631,  630,  635,
      634,  632,  741,  638,  634,  630,  636,  635,  631,  640,

      641,  633,  639,  637,  636,  638,  639,  637,  641,  644,
      740,  637,  640,  638,  634,    0,  645,  635,    0,  640,
      741,  638,  639,  642,  636,  643,  648,  640,  641,  644,
      639,  637,  647,  638,  639,  646,  645,  644,  642,  643,
      640,  648,  646,  642,  645,  643,  648,  640,  647,    0,
      639,  642,  647,  643,  648,  646,    0,  644,  649,  650,
      647,  652,  649,  646,  645,  652,  642,  643,  653,  648,
      646,  642,  650,  643,  648,  651,  647,  651,  654,  650,
      647,  652,  649,  646,  655,    0,  649,  650,  653,  652,
      649,  656,    0,  652,  743,  655,  653,  651,  654,    0,

      650,  657,  656,  651,  655,  651,  654,  650,  744,  652,
      649,  656,  655,  658,  659,  661,  653,  657,  659,  656,
      660,  657,  743,  655,  660,  651,  654,  662,  658,  657,
      656,  664,  655,  658,  665,  661,  744,  745,  659,  656,
      663,  658,  659,  661,  660,  657,  659,  662,  660,  657,
      663,  664,  660,  666,  665,  662,  658,  666,    0,  664,
      663,  658,  665,  661,  668,  745,  659,  669,  663,  667,
      670,  672,  660,  746,  674,  662,  669,  666,  663,  664,
      667,  666,  665,  673,  668,  666,  671,  669,  663,  667,
      670,  672,  668,  674,  674,  669,  673,  667,  670,  672,

      671,  746,  674,  673,  669,  666,  671,  675,  667,  678,
      676,  673,  668,  677,  671,  669,  680,  667,  670,  672,
      675,  674,  674,  676,  673,  679,  677,  675,  671,  678,
      676,  673,  679,  677,  671,  675,  680,  678,  676,  681,
      747,  677,  682,    0,  680,  679,  684,  748,  675,  686,
      749,  676,  751,  679,  677,  675,  683,  678,  676,  681,
      679,  677,  682,  687,  680,  685,  684,  681,  747,  686,
      682,  683,  685,  679,  684,  748,  683,  686,  749,    0,
      751,  688,  752,  687,  683,  685,  689,  681,  692,  689,
      682,  687,  690,  685,  684,  688,  688,  686,  691,  683,

      685,  688,  691,    0,  683,  690,  689,  693,  692,  688,
      752,  687,  690,  685,  689,  753,  692,  689,  691,  694,
      690,  696,    0,  688,  688,  695,  691,  693,  754,  688,
      691,  699,  694,  690,  689,  693,  692,  700,  695,  694,
      690,  696,  697,  753,  698,  695,  691,  694,  698,  696,
      697,  699,    0,  695,  703,  693,  754,  700,  756,  699,
      694,  757,  697,    0,  698,  700,  695,  694,  758,  696,
      697,  701,  698,  695,  703,  701,  698,  702,  697,  699,
      704,  702,  703,    0,  705,  700,  756,  759,  704,  757,
      697,  706,  698,  708,  712,  701,  758,  705,    0,  701,

      704,  702,  703,  701,  705,  702,  706,  707,  704,  702,
      707,  706,  705,  708,  712,  759,  704,  710,  711,  706,
      711,  708,  712,  701,  760,  705,  710,  713,  704,  702,
      707,  714,  705,  715,  706,  707,  709,  710,  707,  706,
      711,  708,  712,  717,  709,  710,  711,  713,  711,  718,
      720,  714,  760,  715,  710,  713,  709,    0,  707,  714,
      719,  715,  716,  717,  709,  710,  716,  723,  711,  718,
      720,  717,  709,  722,  719,  713,  723,  718,  720,  714,
      719,  715,  716,  721,  709,  721,    0,  723,  719,  722,
      716,  717,    0,  722,  716,  723,  724,  718,  720,  725,

      761,  722,  719,  725,  723,  721,    0,    0,  719,  762,
      716,  721,  724,  721,  726,  723,  724,  722,  727,  728,
      727,  722,    0,  725,  724,  729,    0,  725,  761,  726,
      731,  725,    0,  721,  726,  732,  730,  762,  727,  728,
      724,  763,  726,  764,  724,  729,  727,  728,  727,  766,
      731,  725,  730,  729,  734,  732,  730,  726,  731,  733,
      733,  767,  726,  732,  730,  768,  727,  728,  734,  763,
      769,  764,  772,  729,  734,  775,  776,  766,  731,  776,
      730,  777,  734,  732,  730,  780,  733,  783,  784,  767,
      785,  786,  787,  768,  790,  791,  734,  792,  769,  793,

      772,  794,  734,  775,  776,  796,  733,  776,  797,  777,
      799,  800,  801,  780,  733,  783,  784,  802,  785,  786,
      787,  804,  790,  791,  805,  792,  806,  793,  807,  794,
      808,  809,  811,  796,  733,  812,  797,  813,  799,  800,
      801,  815,  816,  818,  818,  802,  821,  822,  824,  804,
        0,  906,  805,  826,  806,    0,  807,  823,  808,  809,
      811,    0,  827,  812,  907,  813,  821,  822,  824,  815,
      816,  818,    0,  826,  821,  822,  824,  823,  823,  906,
      825,  826,  827,  828,  825,  823,  829,  829,    0,  831,
      827,  830,  907,  830,  821,  822,  824,    0,  831,  818,

      825,  826,    0,  828,  834,  823,  823,  829,  825,  831,
      827,  828,  825,  830,  829,  829,  835,  831,  832,  830,
      833,  830,    0,  909,  834,  836,  831,  839,  825,  837,
      833,  828,  834,  832,  836,  829,  835,  831,  832,  837,
      833,  830,    0,  838,  835,  836,  832,  839,  833,  837,
      838,  909,  834,  836,  840,  839,  841,  837,  833,    0,
      841,  832,  836,  838,  835,  842,  832,  837,  833,  844,
      843,  838,  845,  836,  840,  839,  841,  837,  838,  843,
      842,  846,  840,  850,  841,  842,    0,  845,  841,  844,
      843,  838,  845,  842,  910,    0,  846,  844,  843,  911,

      845,  846,  840,  850,  841,  847,  848,  843,  842,  846,
      848,  850,  851,  842,  849,  845,  849,  844,  843,  847,
      845,  852,  910,  853,  846,  847,  848,  911,  852,  846,
      851,  850,  851,  847,  848,  855,  849,  853,  848,  856,
      851,  852,  849,  853,  849,    0,  854,  847,  854,  852,
      858,  853,  912,  847,  848,  855,  852,  857,  851,  856,
      851,  859,  914,  855,  849,  853,  854,  856,    0,  852,
      858,  853,  857,  860,  854,  863,  854,  857,  858,    0,
      912,  859,  861,  855,  862,  857,  864,  856,  860,  859,
      914,  862,  916,  860,  854,  863,  861,  866,  858,  861,

      857,  860,  861,  863,  862,  857,  864,  865,  865,  859,
      861,  867,  862,  868,  864,    0,  860,  866,    0,  862,
      916,  860,  917,  863,  861,  866,  869,  861,  865,  871,
      861,  867,  862,  868,  864,  865,  865,    0,  870,  867,
      869,  868,  870,  872,  871,  866,  869,  873,    0,  871,
      917,    0,    0,  874,  869,    0,  865,  871,  872,  867,
      875,  868,  870,  872,  876,  878,  870,  873,  869,  918,
      870,  872,  871,  874,  869,  873,  879,  871,  878,  876,
      875,  874,  877,  877,  876,  878,  872,    0,  875,  879,
      870,  872,  876,  878,  880,  873,  879,  918,  881,  883,

        0,  874,    0,  877,  879,  882,  878,  876,  875,  882,
      877,  877,  876,  878,  880,  888,  884,  879,  881,  883,
      884,  887,  880,    0,  879,  882,  881,  883,  885,  886,
      886,  877,  885,  882,    0,  888,  887,  882,  889,  889,
      884,  887,  880,  888,  884,  920,  881,  883,  884,  887,
      886,  890,  885,  882,    0,  890,  885,  886,  886,  889,
      885,  892,  891,  888,  887,  892,  889,  889,  884,  887,
      893,  895,  894,  920,  893,  890,  891,  896,  886,  890,
      885,  894,  891,  890,    0,  892,  898,  889,    0,  892,
      891,  895,  894,  892,  893,  897,  897,  896,  893,  895,

      894,  899,  893,  890,  891,  896,  898,  901,  902,  894,
      891,  901,  900,  892,  898,  922,  897,  903,  903,  895,
      894,  899,  893,  897,  897,  896,  900,  904,  902,  899,
      925,  901,  900,  927,  898,  901,  902,  928,  929,  901,
      900,  935,  936,  922,  897,  903,  939,  904,  941,  899,
      944,  945,  946,  947,  900,  904,  902,  948,  925,  901,
      900,  927,  950,  951,  952,  928,  929,  953,  956,  935,
      936,  958,  959,  903,  939,  904,  941,  960,  944,  945,
      946,  947,  965,  966,  968,  948,  970,  972,  969,  971,
      950,  951,  952,    0,    0,  953,  956,  969,  971,  958,

      959,  975,  977,  973,  968,  960,  970,  972,  969,  971,
      965,  966,  968,  974,  970,  972,  969,  971,  973, 1028,
        0,  975,  977,  973,  978,  969,  971,  974,  980,  975,
      977,  973,  968,  974,  970,  972,  969,  971,  976,  978,
      979,  974,  979,  980,  978,  976,  973, 1028,  980,  975,
      977,  973,  978,    0,  981,  974,  980,  982,  976,  983,
      982,  974,  979,  985,  986,    0,  976,  978,  979,    0,
      979,  980,  978,  976,  981,  984,  980,  984,  987,  983,
      982,  988,  981,  985,  986,  982,  976,  983,  982,    0,
      979,  985,  986,  992, 1031,  989,  991,  984,  987,  990,

      991,  988,  981,  984,  989,  984,  987,  983,  982,  988,
      993,  985,  986,  992,  990,  989,  991,  994,    0,  990,
      995,  992, 1031,  989,  991,  984,  987,  990,  991,  988,
      993,  996,  989,  997,  999, 1000, 1002,  994,  993,    0,
      995,  992,  990,  989,  991,  994,  998,  990,  995,    0,
      998,  996, 1001,  997,  999, 1000, 1002, 1004,  993,  996,
        0,  997,  999, 1000, 1002,  994, 1001, 1005,  995, 1003,
      998, 1006, 1001, 1009,  998,    0, 1003, 1004,  998,  996,
     1001,  997,  999, 1000, 1002, 1004, 1006, 1005, 1007, 1003,
     1010, 1006, 1007, 1009, 1001, 1005,    0, 1003,  998, 1006,

     1001, 1009, 1008, 1011, 1003, 1004, 1008, 1012, 1007, 1012,
     1010, 1013, 1014, 1013, 1006, 1005, 1007, 1003, 1010, 1006,
     1007, 1009, 1008, 1011, 1016, 1017, 1014,    0, 1015, 1012,
     1008, 1011, 1014, 1013, 1008, 1012, 1007, 1012, 1010, 1013,
     1014, 1013, 1015, 1019, 1016, 1017,    0,    0, 1015, 1023,
     1008, 1011, 1016, 1017, 1014, 1018, 1015, 1012,    0, 1021,
     1014, 1013, 1018, 1019, 1020, 1024, 1020, 1022, 1022, 1023,
     1015, 1019, 1016, 1017, 1021, 1018, 1015, 1023, 1025, 1021,
     1026, 1034, 1038, 1018, 1040, 1024, 1020, 1021, 1022, 1041,
     1018, 1019, 1020, 1024, 1020, 1022, 1022, 1023, 1025, 1045,

     1026, 1046, 1021, 1018, 1027, 1047, 1025, 1021, 1026, 1034,
     1038, 1027, 1040, 1024, 1020, 1050, 1022, 1041, 1051, 1052,
     1055, 1056, 1060, 1061, 1027, 1062, 1025, 1045, 1026, 1046,
     1064,    0, 1027, 1047, 1066, 1067, 1068, 1067,    0, 1027,
     1069, 1070,    0, 1050, 1073, 1073, 1051, 1052, 1055, 1056,
     1060, 1061, 1027, 1062, 1066, 1071, 1068, 1067, 1064, 1072,
     1069, 1070, 1066, 1067, 1068, 1067, 1074,    0, 1069, 1070,
     1074, 1073, 1075, 1076,    0, 1071, 1078, 1079,    0, 1072,
     1100,    0, 1066, 1071, 1068, 1067, 1080, 1072, 1069, 1070,
     1074, 1073, 1075, 1076, 1074, 1077, 1078, 1079, 1074, 1073,

     1075, 1076, 1081, 1071, 1078, 1079, 1080, 1072, 1100, 1083,
     1077, 1081, 1084, 1085, 1080, 1077, 1083,    0, 1074, 1073,
     1075, 1076, 1081, 1077, 1078, 1079, 1082, 1086, 1082, 1083,
     1081, 1089, 1084, 1085, 1080,    0,    0, 1083, 1077, 1081,
     1084, 1085, 1087, 1077, 1083, 1090,    0, 1086, 1082, 1088,
     1081, 1089, 1087,    0, 1082, 1086, 1082, 1083, 1088, 1089,
     1084, 1085, 1087, 1091, 1093, 1090,    0, 1094, 1092, 1088,
     1087,    0,    0, 1090, 1092, 1086, 1082, 1088, 1091, 1089,
     1087, 1095, 1102, 1091, 1093, 1096, 1088, 1094, 1092, 1103,
     1087, 1091, 1093, 1090, 1097, 1094, 1092, 1088, 1098, 1099,

     1096, 1095, 1092, 1104, 1104, 1096, 1091, 1105, 1108, 1095,
     1102, 1091, 1093, 1096, 1097, 1094, 1092, 1103, 1098, 1099,
     1109, 1111, 1097, 1112, 1113, 1116, 1098, 1099, 1096, 1095,
     1118, 1119,    0, 1096,    0, 1105, 1108, 1121,    0, 1123,
     1123, 1122, 1097, 1104, 1125, 1138, 1098, 1099, 1109, 1111,
     1121, 1112, 1113, 1116, 1122, 1124, 1126, 1121, 1118, 1119,
     1127, 1122, 1127,    0, 1125, 1121, 1128, 1129,    0, 1122,
     1124, 1104, 1125, 1138,    0, 1124, 1126, 1140, 1121, 1123,
     1127, 1128, 1122, 1124, 1126, 1121, 1128, 1129, 1127, 1122,
     1127, 1131, 1125, 1130, 1128, 1129, 1133, 1132, 1124, 1132,

     1131,    0, 1134, 1124, 1126, 1140, 1130, 1123, 1127, 1128,
     1142, 1131, 1136, 1130, 1128, 1129, 1133, 1132, 1143, 1131,
     1146, 1130, 1134, 1149, 1133, 1132, 1151, 1132, 1131, 1135,
     1134, 1155, 1136, 1135, 1130, 1137, 1137,    0, 1142, 1131,
     1136, 1130, 1153, 1164, 1133, 1132, 1143, 1156, 1146, 1135,
     1134, 1149, 1154, 1154, 1151, 1166, 1137, 1135, 1157, 1155,
     1136, 1135, 1153, 1137, 1137, 1158,    0, 1156, 1159, 1160,
     1153, 1164, 1161,    0, 1163, 1156,    0, 1135, 1157, 1154,
     1168, 1162, 1159, 1166, 1137, 1158, 1157, 1171, 1159, 1160,
     1153, 1162, 1161, 1158, 1163, 1156, 1159, 1160, 1172, 1154,

     1161, 1162, 1163, 1167, 1167, 1176, 1157, 1154, 1168, 1162,
     1159, 1175, 1175, 1158, 1177, 1171, 1159, 1160, 1178, 1162,
     1161, 1179, 1163, 1174,    0, 1180, 1172, 1154, 1182, 1162,
     1179, 1174, 1183, 1176, 1177, 1184, 1190, 1189, 1178, 1191,
        0, 1179, 1177, 1174, 1167, 1196, 1178, 1167, 1193, 1179,
     1197, 1174, 1175, 1180, 1198, 1175, 1182, 1189, 1179, 1174,
     1183, 1200, 1177, 1184, 1190, 1189, 1178, 1191, 1193, 1179,
     1200, 1174, 1167, 1196, 1201, 1167, 1193, 1202, 1197, 1204,
     1175, 1200, 1198, 1175, 1206, 1189, 1208, 1210, 1213, 1200,
     1215, 1216, 1218, 1220, 1222, 1224, 1193,    0, 1200,    0,

        0, 1208, 1201,    0,    0, 1202, 1208, 1204,    0, 1200,
     1215,    0, 1206,    0, 1208, 1210, 1213,    0, 1215, 1216,
     1218, 1220, 1222, 1224,    0,    0,    0,    0,    0, 1208,
        0,    0,    0,    0, 1208,    0,    0,    0, 1215, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1237, 1237, 1237, 1237,
     1237, 1237, 1237, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1239,    0,    0, 1239, 1239, 1239, 1239, 1241,    0, 1241,
     1241, 1241, 1241, 1242, 1242, 1242,    0, 1242, 1242, 1242,
     1243,    0, 1243, 1243, 1243, 1243, 1243, 1244,    0, 1244,
     1244, 1244, 1244, 1244, 1245,    0, 1245, 1245, 1245, 1245,

     1245, 1246,    0, 1246, 1246, 1246, 1246, 1246, 1247,    0,
     1247, 1247,    0, 1247, 1247, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1235

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
/*
	lexer
*/

/***************************
 ** Section 1: Definitions
 ***************************/
#line 10 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
#include <sql-parser.h>
#pragma hdrstop
#include "bison_parser.h"
#include <climits>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2065 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* @sobolev
%option header-file="flex_lexer.h"
%option outfile="flex_lexer.cpp"
*/
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2083 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.cpp"

#define INITIAL 0
#define incl 1
#define singlequotedstring 2
#define COMMENT 3
#define IN_COMMENT 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif
    
#ifndef YY_EXTRA_TYPE
	#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t {
    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;
    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE * yyin_r;
    FILE * yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char * yy_c_buf_p;
    int    yy_init;
    int    yy_start;
    int    yy_did_buffer_switch_on_eof;
    int    yy_start_stack_ptr;
    int    yy_start_stack_depth;
    int  * yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char * yy_last_accepting_cpos;
    int    yylineno_r;
    int    yy_flex_debug_r;

    char * yytext_r;
    int    yy_more_flag;
    int    yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals(yyscan_t yyscanner);

    // This must go here because YYSTYPE and YYLTYPE are included from bison output in section 1.
    #define yylval yyg->yylval_r
    
    #define yylloc yyg->yylloc_r
    
int yylex_init(yyscan_t * scanner);

int yylex_init_extra(YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

// Accessor methods to globals. These are made visible to non-reentrant scanners for convenience.

int yylex_destroy(yyscan_t yyscanner);

int yyget_debug(yyscan_t yyscanner);

void yyset_debug(int debug_flag , yyscan_t yyscanner);

YY_EXTRA_TYPE yyget_extra(yyscan_t yyscanner);

void yyset_extra(YY_EXTRA_TYPE user_defined , yyscan_t yyscanner);

FILE * yyget_in(yyscan_t yyscanner);

void yyset_in(FILE * _in_str , yyscan_t yyscanner);

FILE * yyget_out(yyscan_t yyscanner);

void yyset_out(FILE * _out_str , yyscan_t yyscanner);

int yyget_leng(yyscan_t yyscanner);

char * yyget_text(yyscan_t yyscanner);

int yyget_lineno(yyscan_t yyscanner);

void yyset_lineno(int _line_number , yyscan_t yyscanner);

int yyget_column(yyscan_t yyscanner);

void yyset_column(int _column_no , yyscan_t yyscanner);

YYSTYPE * yyget_lval(yyscan_t yyscanner);

void yyset_lval(YYSTYPE * yylval_param , yyscan_t yyscanner);

       YYLTYPE * yyget_lloc(yyscan_t yyscanner);
    
        void yyset_lloc(YYLTYPE * yylloc_param , yyscan_t yyscanner);
    
//
// Macros after this point can all be overridden by user definitions in section 1.
//

#ifndef YY_SKIP_YYWRAP
	#ifdef __cplusplus
		extern "C" int yywrap ( yyscan_t yyscanner );
	#else
		extern int yywrap ( yyscan_t yyscanner );
	#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput(yyscan_t yyscanner);
#else
static int input(yyscan_t yyscanner);
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
	#ifdef __ia64__
	// On IA-64, the buffer size is 16k, not 8k
		#define YY_READ_BUF_SIZE 16384
	#else
		#define YY_READ_BUF_SIZE 8192
	#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if(fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if(YY_CURRENT_BUFFER_LVALUE->yy_is_interactive) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if(c == '\n') \
			buf[n++] = (char) c; \
		if(c == EOF && ferror(yyin)) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
	#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
	#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng have been set up. */
#ifndef YY_USER_ACTION
	#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
	#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work. */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if(!yyg->yy_init) {
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if(!yyg->yy_start)
			yyg->yy_start = 1;	/* first start state */

		if(!yyin)
			yyin = stdin;

		if(!yyout)
			yyout = stdout;

		if(!YY_CURRENT_BUFFER) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE = yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 56 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"


#line 2362 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.cpp"

	while(/*CONSTCOND*/1) { /* loops until end-of-file is reached */
		yy_cp = yyg->yy_c_buf_p;
		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;
		/* yy_bp points to the position in yy_ch_buf of the start of the current run. */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if(yy_accept[yy_current_state])
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while(yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
				{
				yy_current_state = (int)yy_def[yy_current_state];
				if(yy_current_state >= 1236)
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1235 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch(yy_act) { /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
BEGIN(IN_COMMENT);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 64 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
// eat comment in chunks
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 65 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
// eat the lone star
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 66 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
yylineno++;
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 68 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
/*END         TOKEN(END)*/
case 46:
YY_RULE_SETUP
#line 107 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 108 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 109 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 110 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 111 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 112 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 113 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 114 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 115 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 116 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 117 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 118 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 119 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 120 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 121 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(GROUPS)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 122 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 123 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 124 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 125 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 126 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 134 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 135 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 136 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 137 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 140 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 144 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 145 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(LOCKED)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 154 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 155 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 156 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(NOWAIT)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 157 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 158 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 159 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 160 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 161 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 162 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 163 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 164 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 165 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(OVER)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 166 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 167 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(PARTITION)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 168 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 169 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(PRECEDING)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 170 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 171 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 172 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(RANGE)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 173 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 174 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 175 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 176 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 177 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(ROWS)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 178 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 179 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 180 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 181 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 182 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 183 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 184 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SHARE)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 185 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 186 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SKIP)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 187 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 188 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 189 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 190 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
/*TEMPORARY   TOKEN(TEMPORARY)*/
case 130:
YY_RULE_SETUP
#line 192 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 193 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 194 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 195 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 196 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 197 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 198 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 199 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 200 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 201 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(AUTO_INCREMENT) /* @sobolev */
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 202 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 203 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 204 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 205 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 206 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 207 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 208 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 209 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 210 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 211 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 212 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
/* @sobolev
LONG        TOKEN(LONG)
BIGINT      TOKEN(BIGINT)
BOOLEAN     TOKEN(BOOLEAN)
CHAR        TOKEN(CHAR)
DATE        TOKEN(DATE)
DATETIME    TOKEN(DATETIME)
DECIMAL     TOKEN(DECIMAL)
DOUBLE      TOKEN(DOUBLE)
FLOAT       TOKEN(FLOAT)
REAL        TOKEN(REAL)
INT         TOKEN(INT)
INTEGER     TOKEN(INTEGER)
SMALLINT    TOKEN(SMALLINT)
NVARCHAR    TOKEN(NVARCHAR)
VARCHAR     TOKEN(VARCHAR)
TEXT        TOKEN(TEXT)
TIME        TOKEN(TIME)
TIMESTAMP   TOKEN(TIMESTAMP) */
/*
BINARY      TOKEN(BINARY) 
RAW         TOKEN(BINARY)*/
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 237 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CURRENT_ROW)
	YY_BREAK
case 152:
/* rule 152 can match eol */
YY_RULE_SETUP
#line 238 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 239 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CHARACTER_SET)
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 240 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(WITH_FORMAT)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 155:
YY_RULE_SETUP
#line 243 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 244 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 245 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 246 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 247 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 248 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 250 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 162:
#line 253 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
case 163:
YY_RULE_SETUP
#line 253 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 164:
YY_RULE_SETUP
#line 263 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{
	yylval->ival = LLONG_MIN;
	return SQL_INTVAL;
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 268 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{
	errno = 0;
	yylval->ival = strtoll(yytext, nullptr, 0);
	if(errno) {
		slfprintf_stderr("[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
		return 0;
	}
	return SQL_INTVAL;
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 278 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
/* @sobolev */
case 167:
YY_RULE_SETUP
#line 285 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 291 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{
	yylval->sval = _strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 296 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 297 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 298 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 299 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{ BEGIN 0; yylval->sval = _strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 300 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{ slfprintf_stderr("[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 302 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
{ slfprintf_stderr("[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 304 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"
ECHO;
	YY_BREAK
#line 3344 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(incl):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(IN_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;
		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET
		if(YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW) {
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test in input().
		 */
		if(yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] ) { /* This was really a NUL. */
			yy_state_type yy_next_state;
			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;
			yy_current_state = yy_get_previous_state( yyscanner );
			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans(yy_current_state , yyscanner);
			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
			if(yy_next_state ) {
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else {
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch(yy_get_next_buffer( yyscanner)) {
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;
				if(yywrap( yyscanner ) ) {
					/* Note: because we've taken care in yy_get_next_buffer() to have set up
					 * yytext, we can now set up yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to call the scanner after we return the
					 * YY_NULL, it'll still work - another YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;
					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}
				else {
					if(! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;
				yy_current_state = yy_get_previous_state( yyscanner );
				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;
			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];
				yy_current_state = yy_get_previous_state( yyscanner );
				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR("fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer(yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char * dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char * source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;
	if(yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR("fatal flex scanner internal error--end of buffer missed" );

	if(YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 ) { /* Don't try to fill the buffer, so this is an EOF. */
		if(yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 ) {
			/* We matched a single character, the EOB, so treat this as a final EOF. */
			return EOB_ACT_END_OF_FILE;
			}
		else {
			/* We matched some text prior to the EOB, first process it. */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for(i = 0; i < number_to_move; ++i)
		*(dest++) = *(source++);

	if(YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF, just force an EOF */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else {
			int num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while(num_to_read <= 0) { /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset = (int)(yyg->yy_c_buf_p - b->yy_ch_buf);
			if(b->yy_is_our_buffer ) {
				int new_size = b->yy_buf_size * 2;
				if(new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;
				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf, (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if(!b->yy_ch_buf)
				YY_FATAL_ERROR("fatal error - scanner input buffer overflow" );
			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

			}

		if(num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]), yyg->yy_n_chars, num_to_read );
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if(yyg->yy_n_chars == 0 ) {
		if(number_to_move == YY_MORE_ADJ ) {
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}
		else {
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *)yyrealloc((void *)YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t)new_size , yyscanner);
		if(!YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
			YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for(yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp ) {
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if(yy_accept[yy_current_state])
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while(yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
			{
			yy_current_state = (int)yy_def[yy_current_state];
			if(yy_current_state >= 1236)
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if(yy_accept[yy_current_state])
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while(yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
		{
		yy_current_state = (int)yy_def[yy_current_state];
		if(yy_current_state >= 1236)
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1235);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput(yyscan_t yyscanner)
#else
    static int input(yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if(*yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR) {
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if(yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars])
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else { /* need more input */
			int offset = (int)(yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;
			switch(yy_get_next_buffer( yyscanner)) {
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);
					/*FALLTHROUGH*/
				case EOB_ACT_END_OF_FILE:
					{
					if(yywrap( yyscanner))
						return 0;
					if(!yyg->yy_did_buffer_switch_on_eof)
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}
				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *)yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if(!YY_CURRENT_BUFFER) {
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE = yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state(yyscanner);
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if(YY_CURRENT_BUFFER == new_buffer )
		return;

	if(YY_CURRENT_BUFFER ) {
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if(!b)
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *)yyalloc((yy_size_t) (b->yy_buf_size + 2) , yyscanner);
	if(!b->yy_ch_buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");
	b->yy_is_our_buffer = 1;
	yy_init_buffer(b, file , yyscanner);
	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if(! b )
		return;

	if(b == YY_CURRENT_BUFFER) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if(b->yy_is_our_buffer)
		yyfree((void *)b->yy_ch_buf , yyscanner);

	yyfree((void *)b , yyscanner);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yy_flush_buffer(b , yyscanner);
	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	/* If b is the current buffer, then yy_init_buffer was _probably_
	* called from yyrestart() or through yy_get_next_buffer.
	* In that case, we don't want to reset the lineno or column.
	*/
	if(b != YY_CURRENT_BUFFER) {
		b->yy_bs_lineno = 1;
		b->yy_bs_column = 0;
	}

	b->yy_is_interactive = 0;
    
	errno = oerrno;
}

//
// Discard all buffered characters. On the next scan, YY_INPUT will be called.
// @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
// @param yyscanner The scanner object.
//
void yy_flush_buffer (YY_BUFFER_STATE b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if(!b)
		return;
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if(b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if(new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if(YY_CURRENT_BUFFER) {
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if(YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if(!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if(yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if(YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner);
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if(!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if(!yyg->yy_buffer_stack)
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memzero(yyg->yy_buffer_stack, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if(yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1) {

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if(!yyg->yy_buffer_stack)
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memzero(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if(size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if(! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if(!buf)
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for(i = 0; i < _yybytes_len; ++i)
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if(!b)
		YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

	/* It's okay to grow etc. this buffer, and we should throw it away when we're done. */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
	#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf(stderr, "%s\n", msg);
	exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do { \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} while(0)

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra(yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if(! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if(! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng(yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char * yyget_text(yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if(!YY_CURRENT_BUFFER)
           YY_FATAL_ERROR("yyset_lineno called with no buffer");
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if(!YY_CURRENT_BUFFER)
           YY_FATAL_ERROR("yyset_column called with no buffer");
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str;
}

int yyget_debug(yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval(yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE * yyget_lloc(yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if(ptr_yy_globals == NULL) {
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc(sizeof(struct yyguts_t), NULL);

    if(*ptr_yy_globals == NULL) {
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memzero(*ptr_yy_globals, sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if(ptr_yy_globals == NULL) {
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t)yyalloc(sizeof( struct yyguts_t ), &dummy_yyguts);

    if(*ptr_yy_globals == NULL) {
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memzero(*ptr_yy_globals, sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy(yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER) {
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for(i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for(n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void * yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return SAlloc::M(size);
}

void * yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return SAlloc::R(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	SAlloc::F((char *)ptr); /* see yyrealloc() for(char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 304 "D:\\Papyrus\\Src\\OSF\\sql-parser\\src\\parser\\flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) 
{ 
    slfprintf_stderr("[SQL-Lexer-Error] %s\n",msg); 
    return 0; 
}

